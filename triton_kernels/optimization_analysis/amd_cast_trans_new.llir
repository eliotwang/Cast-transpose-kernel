; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target triple = "amdgcn-amd-amdhsa"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8], align 16

define amdgpu_kernel void @_transpose_triton(ptr addrspace(1) nocapture readonly %0, ptr addrspace(1) nocapture writeonly %1, ptr addrspace(1) nocapture writeonly %2, i32 %3, i32 %4, i32 %5, i32 %6, ptr addrspace(1) nocapture readonly %7, ptr addrspace(1) nocapture %8) local_unnamed_addr #0 !dbg !4 {
  %10 = tail call i32 @llvm.amdgcn.workgroup.id.x(), !dbg !7
  %11 = addrspacecast ptr addrspace(1) %7 to ptr, !dbg !8
  %12 = load float, ptr %11, align 4, !dbg !8
  %13 = add i32 %5, 127, !dbg !9
  %14 = sdiv i32 %13, 128, !dbg !10
  %15 = add i32 %6, 127, !dbg !11
  %16 = sdiv i32 %15, 128, !dbg !12
  %17 = shl nsw i32 %16, 3, !dbg !13
  %.frozen = freeze i32 %17
  %18 = sdiv i32 %10, %.frozen, !dbg !14
  %19 = shl i32 %18, 3, !dbg !15
  %20 = sub i32 %14, %19, !dbg !16
  %21 = tail call i32 @llvm.smin.i32(i32 %20, i32 8), !dbg !17
  %22 = srem i32 %10, %21, !dbg !18
  %23 = add i32 %19, %22, !dbg !19
  %24 = mul i32 %18, %.frozen
  %.decomposed = sub i32 %10, %24
  %25 = sdiv i32 %.decomposed, %21, !dbg !20
  %26 = shl i32 %23, 7, !dbg !21
  %27 = tail call i32 @llvm.amdgcn.workitem.id.x(), !dbg !22
  %28 = and i32 %27, 63, !dbg !22
  %29 = lshr i32 %27, 6, !dbg !22
  %30 = lshr i32 %27, 3, !dbg !22
  %31 = and i32 %30, 63, !dbg !22
  %32 = or disjoint i32 %31, 64, !dbg !22
  %33 = shl i32 %27, 4, !dbg !22
  %34 = and i32 %33, 112, !dbg !22
  %35 = or disjoint i32 %34, 4, !dbg !22
  %36 = or disjoint i32 %34, 8, !dbg !22
  %37 = or disjoint i32 %34, 12, !dbg !22
  %38 = or disjoint i32 %26, %31, !dbg !23
  %39 = or disjoint i32 %26, %32, !dbg !23
  %40 = or disjoint i32 %26, %34, !dbg !23
  %41 = or disjoint i32 %26, %35, !dbg !23
  %42 = or disjoint i32 %26, %36, !dbg !23
  %43 = or disjoint i32 %26, %37, !dbg !23
  %44 = shl i32 %25, 7, !dbg !24
  %45 = or disjoint i32 %44, %34, !dbg !25
  %46 = or disjoint i32 %44, %35, !dbg !25
  %47 = or disjoint i32 %44, %36, !dbg !25
  %48 = or disjoint i32 %44, %37, !dbg !25
  %49 = or disjoint i32 %44, %31, !dbg !25
  %50 = or disjoint i32 %44, %32, !dbg !25
  %51 = mul i32 %38, %3, !dbg !26
  %52 = mul i32 %39, %3, !dbg !26
  %53 = sext i32 %51 to i64, !dbg !27
  %54 = sext i32 %52 to i64, !dbg !27
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !27
  %56 = sext i32 %46 to i64, !dbg !28
  %57 = sext i32 %47 to i64, !dbg !28
  %58 = sext i32 %48 to i64, !dbg !28
  %59 = sext i32 %45 to i64, !dbg !28
  %60 = getelementptr float, ptr addrspace(1) %55, i64 %59, !dbg !28
  %61 = getelementptr float, ptr addrspace(1) %55, i64 %56, !dbg !28
  %62 = getelementptr float, ptr addrspace(1) %55, i64 %57, !dbg !28
  %63 = getelementptr float, ptr addrspace(1) %55, i64 %58, !dbg !28
  %64 = icmp slt i32 %38, %5, !dbg !29
  %65 = icmp slt i32 %39, %5, !dbg !29
  %66 = icmp slt i32 %40, %5, !dbg !29
  %67 = icmp slt i32 %45, %6, !dbg !30
  %68 = icmp slt i32 %49, %6, !dbg !30
  %69 = icmp slt i32 %50, %6, !dbg !30
  %70 = and i1 %64, %67, !dbg !31
  %71 = and i1 %65, %67, !dbg !31
  %72 = and i1 %66, %68, !dbg !31
  %73 = and i1 %66, %69, !dbg !31
  br i1 %70, label %74, label %106, !dbg !32

74:                                               ; preds = %9
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !27
  %76 = getelementptr float, ptr addrspace(1) %75, i64 %58, !dbg !28
  %77 = getelementptr float, ptr addrspace(1) %75, i64 %57, !dbg !28
  %78 = getelementptr float, ptr addrspace(1) %75, i64 %56, !dbg !28
  %79 = getelementptr float, ptr addrspace(1) %75, i64 %59, !dbg !28
  %80 = addrspacecast ptr addrspace(1) %79 to ptr, !dbg !32
  %81 = load float, ptr %80, align 16, !dbg !32
  %82 = getelementptr inbounds i8, ptr %80, i64 4, !dbg !32
  %83 = load float, ptr %82, align 4, !dbg !32
  %84 = getelementptr inbounds i8, ptr %80, i64 8, !dbg !32
  %85 = load float, ptr %84, align 8, !dbg !32
  %86 = getelementptr inbounds i8, ptr %80, i64 12, !dbg !32
  %87 = load float, ptr %86, align 4, !dbg !32
  %88 = addrspacecast ptr addrspace(1) %78 to ptr, !dbg !32
  %89 = load float, ptr %88, align 16, !dbg !32
  %90 = getelementptr inbounds i8, ptr %88, i64 4, !dbg !32
  %91 = load float, ptr %90, align 4, !dbg !32
  %92 = getelementptr inbounds i8, ptr %88, i64 8, !dbg !32
  %93 = load float, ptr %92, align 8, !dbg !32
  %94 = getelementptr inbounds i8, ptr %88, i64 12, !dbg !32
  %95 = load float, ptr %94, align 4, !dbg !32
  %96 = addrspacecast ptr addrspace(1) %77 to ptr, !dbg !32
  %97 = load float, ptr %96, align 16, !dbg !32
  %98 = getelementptr inbounds i8, ptr %96, i64 4, !dbg !32
  %99 = load float, ptr %98, align 4, !dbg !32
  %100 = getelementptr inbounds i8, ptr %96, i64 8, !dbg !32
  %101 = load float, ptr %100, align 8, !dbg !32
  %102 = getelementptr inbounds i8, ptr %96, i64 12, !dbg !32
  %103 = load float, ptr %102, align 4, !dbg !32
  %104 = addrspacecast ptr addrspace(1) %76 to ptr, !dbg !32
  %105 = load <4 x float>, ptr %104, align 16, !dbg !32
  br label %106, !dbg !32

106:                                              ; preds = %9, %74
  %107 = phi float [ %103, %74 ], [ 0.000000e+00, %9 ]
  %108 = phi float [ %101, %74 ], [ 0.000000e+00, %9 ]
  %109 = phi float [ %99, %74 ], [ 0.000000e+00, %9 ]
  %110 = phi float [ %97, %74 ], [ 0.000000e+00, %9 ]
  %111 = phi float [ %87, %74 ], [ 0.000000e+00, %9 ]
  %112 = phi float [ %85, %74 ], [ 0.000000e+00, %9 ]
  %113 = phi float [ %83, %74 ], [ 0.000000e+00, %9 ]
  %114 = phi float [ %81, %74 ], [ 0.000000e+00, %9 ]
  %115 = phi float [ %89, %74 ], [ 0.000000e+00, %9 ]
  %116 = phi float [ %91, %74 ], [ 0.000000e+00, %9 ]
  %117 = phi float [ %93, %74 ], [ 0.000000e+00, %9 ]
  %118 = phi float [ %95, %74 ], [ 0.000000e+00, %9 ]
  %119 = phi <4 x float> [ %105, %74 ], [ zeroinitializer, %9 ]
  %120 = extractelement <4 x float> %119, i64 0, !dbg !32
  %121 = extractelement <4 x float> %119, i64 1, !dbg !32
  %122 = extractelement <4 x float> %119, i64 2, !dbg !32
  %123 = extractelement <4 x float> %119, i64 3, !dbg !32
  br i1 %71, label %124, label %151, !dbg !32

124:                                              ; preds = %106
  %125 = addrspacecast ptr addrspace(1) %60 to ptr, !dbg !32
  %126 = load float, ptr %125, align 16, !dbg !32
  %127 = getelementptr inbounds i8, ptr %125, i64 4, !dbg !32
  %128 = load float, ptr %127, align 4, !dbg !32
  %129 = getelementptr inbounds i8, ptr %125, i64 8, !dbg !32
  %130 = load float, ptr %129, align 8, !dbg !32
  %131 = getelementptr inbounds i8, ptr %125, i64 12, !dbg !32
  %132 = load float, ptr %131, align 4, !dbg !32
  %133 = addrspacecast ptr addrspace(1) %61 to ptr, !dbg !32
  %134 = load float, ptr %133, align 16, !dbg !32
  %135 = getelementptr inbounds i8, ptr %133, i64 4, !dbg !32
  %136 = load float, ptr %135, align 4, !dbg !32
  %137 = getelementptr inbounds i8, ptr %133, i64 8, !dbg !32
  %138 = load float, ptr %137, align 8, !dbg !32
  %139 = getelementptr inbounds i8, ptr %133, i64 12, !dbg !32
  %140 = load float, ptr %139, align 4, !dbg !32
  %141 = addrspacecast ptr addrspace(1) %62 to ptr, !dbg !32
  %142 = load float, ptr %141, align 16, !dbg !32
  %143 = getelementptr inbounds i8, ptr %141, i64 4, !dbg !32
  %144 = load float, ptr %143, align 4, !dbg !32
  %145 = getelementptr inbounds i8, ptr %141, i64 8, !dbg !32
  %146 = load float, ptr %145, align 8, !dbg !32
  %147 = getelementptr inbounds i8, ptr %141, i64 12, !dbg !32
  %148 = load float, ptr %147, align 4, !dbg !32
  %149 = addrspacecast ptr addrspace(1) %63 to ptr, !dbg !32
  %150 = load <4 x float>, ptr %149, align 16, !dbg !32
  br label %151, !dbg !32

151:                                              ; preds = %106, %124
  %152 = phi float [ %148, %124 ], [ 0.000000e+00, %106 ]
  %153 = phi float [ %146, %124 ], [ 0.000000e+00, %106 ]
  %154 = phi float [ %144, %124 ], [ 0.000000e+00, %106 ]
  %155 = phi float [ %142, %124 ], [ 0.000000e+00, %106 ]
  %156 = phi float [ %132, %124 ], [ 0.000000e+00, %106 ]
  %157 = phi float [ %130, %124 ], [ 0.000000e+00, %106 ]
  %158 = phi float [ %128, %124 ], [ 0.000000e+00, %106 ]
  %159 = phi float [ %126, %124 ], [ 0.000000e+00, %106 ]
  %160 = phi float [ %134, %124 ], [ 0.000000e+00, %106 ]
  %161 = phi float [ %136, %124 ], [ 0.000000e+00, %106 ]
  %162 = phi float [ %138, %124 ], [ 0.000000e+00, %106 ]
  %163 = phi float [ %140, %124 ], [ 0.000000e+00, %106 ]
  %164 = phi <4 x float> [ %150, %124 ], [ zeroinitializer, %106 ]
  %165 = extractelement <4 x float> %164, i64 0, !dbg !32
  %166 = extractelement <4 x float> %164, i64 1, !dbg !32
  %167 = extractelement <4 x float> %164, i64 2, !dbg !32
  %168 = extractelement <4 x float> %164, i64 3, !dbg !32
  %169 = fmul float %12, %114, !dbg !33
  %170 = fmul float %12, %113, !dbg !33
  %171 = fmul float %12, %112, !dbg !33
  %172 = fmul float %12, %111, !dbg !33
  %173 = fmul float %12, %115, !dbg !33
  %174 = fmul float %12, %116, !dbg !33
  %175 = fmul float %12, %117, !dbg !33
  %176 = fmul float %12, %118, !dbg !33
  %177 = fmul float %12, %110, !dbg !33
  %178 = fmul float %12, %109, !dbg !33
  %179 = fmul float %12, %108, !dbg !33
  %180 = fmul float %12, %107, !dbg !33
  %181 = fmul float %12, %120, !dbg !33
  %182 = fmul float %12, %121, !dbg !33
  %183 = fmul float %12, %122, !dbg !33
  %184 = fmul float %12, %123, !dbg !33
  %185 = fmul float %12, %159, !dbg !33
  %186 = fmul float %12, %158, !dbg !33
  %187 = fmul float %12, %157, !dbg !33
  %188 = fmul float %12, %156, !dbg !33
  %189 = fmul float %12, %160, !dbg !33
  %190 = fmul float %12, %161, !dbg !33
  %191 = fmul float %12, %162, !dbg !33
  %192 = fmul float %12, %163, !dbg !33
  %193 = fmul float %12, %155, !dbg !33
  %194 = fmul float %12, %154, !dbg !33
  %195 = fmul float %12, %153, !dbg !33
  %196 = fmul float %12, %152, !dbg !33
  %197 = fmul float %12, %165, !dbg !33
  %198 = fmul float %12, %166, !dbg !33
  %199 = fmul float %12, %167, !dbg !33
  %200 = fmul float %12, %168, !dbg !33
  %201 = tail call float @llvm.maxnum.f32(float %169, float -2.400000e+02), !dbg !34
  %202 = tail call float @llvm.minnum.f32(float %201, float 2.400000e+02), !dbg !34
  %203 = tail call float @llvm.maxnum.f32(float %170, float -2.400000e+02), !dbg !34
  %204 = tail call float @llvm.minnum.f32(float %203, float 2.400000e+02), !dbg !34
  %205 = tail call float @llvm.maxnum.f32(float %171, float -2.400000e+02), !dbg !34
  %206 = tail call float @llvm.minnum.f32(float %205, float 2.400000e+02), !dbg !34
  %207 = tail call float @llvm.maxnum.f32(float %172, float -2.400000e+02), !dbg !34
  %208 = tail call float @llvm.minnum.f32(float %207, float 2.400000e+02), !dbg !34
  %209 = tail call float @llvm.maxnum.f32(float %173, float -2.400000e+02), !dbg !34
  %210 = tail call float @llvm.minnum.f32(float %209, float 2.400000e+02), !dbg !34
  %211 = tail call float @llvm.maxnum.f32(float %174, float -2.400000e+02), !dbg !34
  %212 = tail call float @llvm.minnum.f32(float %211, float 2.400000e+02), !dbg !34
  %213 = tail call float @llvm.maxnum.f32(float %175, float -2.400000e+02), !dbg !34
  %214 = tail call float @llvm.minnum.f32(float %213, float 2.400000e+02), !dbg !34
  %215 = tail call float @llvm.maxnum.f32(float %176, float -2.400000e+02), !dbg !34
  %216 = tail call float @llvm.minnum.f32(float %215, float 2.400000e+02), !dbg !34
  %217 = tail call float @llvm.maxnum.f32(float %177, float -2.400000e+02), !dbg !34
  %218 = tail call float @llvm.minnum.f32(float %217, float 2.400000e+02), !dbg !34
  %219 = tail call float @llvm.maxnum.f32(float %178, float -2.400000e+02), !dbg !34
  %220 = tail call float @llvm.minnum.f32(float %219, float 2.400000e+02), !dbg !34
  %221 = tail call float @llvm.maxnum.f32(float %179, float -2.400000e+02), !dbg !34
  %222 = tail call float @llvm.minnum.f32(float %221, float 2.400000e+02), !dbg !34
  %223 = tail call float @llvm.maxnum.f32(float %180, float -2.400000e+02), !dbg !34
  %224 = tail call float @llvm.minnum.f32(float %223, float 2.400000e+02), !dbg !34
  %225 = tail call float @llvm.maxnum.f32(float %181, float -2.400000e+02), !dbg !34
  %226 = tail call float @llvm.minnum.f32(float %225, float 2.400000e+02), !dbg !34
  %227 = tail call float @llvm.maxnum.f32(float %182, float -2.400000e+02), !dbg !34
  %228 = tail call float @llvm.minnum.f32(float %227, float 2.400000e+02), !dbg !34
  %229 = tail call float @llvm.maxnum.f32(float %183, float -2.400000e+02), !dbg !34
  %230 = tail call float @llvm.minnum.f32(float %229, float 2.400000e+02), !dbg !34
  %231 = tail call float @llvm.maxnum.f32(float %184, float -2.400000e+02), !dbg !34
  %232 = tail call float @llvm.minnum.f32(float %231, float 2.400000e+02), !dbg !34
  %233 = tail call float @llvm.maxnum.f32(float %185, float -2.400000e+02), !dbg !34
  %234 = tail call float @llvm.minnum.f32(float %233, float 2.400000e+02), !dbg !34
  %235 = tail call float @llvm.maxnum.f32(float %186, float -2.400000e+02), !dbg !34
  %236 = tail call float @llvm.minnum.f32(float %235, float 2.400000e+02), !dbg !34
  %237 = tail call float @llvm.maxnum.f32(float %187, float -2.400000e+02), !dbg !34
  %238 = tail call float @llvm.minnum.f32(float %237, float 2.400000e+02), !dbg !34
  %239 = tail call float @llvm.maxnum.f32(float %188, float -2.400000e+02), !dbg !34
  %240 = tail call float @llvm.minnum.f32(float %239, float 2.400000e+02), !dbg !34
  %241 = tail call float @llvm.maxnum.f32(float %189, float -2.400000e+02), !dbg !34
  %242 = tail call float @llvm.minnum.f32(float %241, float 2.400000e+02), !dbg !34
  %243 = tail call float @llvm.maxnum.f32(float %190, float -2.400000e+02), !dbg !34
  %244 = tail call float @llvm.minnum.f32(float %243, float 2.400000e+02), !dbg !34
  %245 = tail call float @llvm.maxnum.f32(float %191, float -2.400000e+02), !dbg !34
  %246 = tail call float @llvm.minnum.f32(float %245, float 2.400000e+02), !dbg !34
  %247 = tail call float @llvm.maxnum.f32(float %192, float -2.400000e+02), !dbg !34
  %248 = tail call float @llvm.minnum.f32(float %247, float 2.400000e+02), !dbg !34
  %249 = tail call float @llvm.maxnum.f32(float %193, float -2.400000e+02), !dbg !34
  %250 = tail call float @llvm.minnum.f32(float %249, float 2.400000e+02), !dbg !34
  %251 = tail call float @llvm.maxnum.f32(float %194, float -2.400000e+02), !dbg !34
  %252 = tail call float @llvm.minnum.f32(float %251, float 2.400000e+02), !dbg !34
  %253 = tail call float @llvm.maxnum.f32(float %195, float -2.400000e+02), !dbg !34
  %254 = tail call float @llvm.minnum.f32(float %253, float 2.400000e+02), !dbg !34
  %255 = tail call float @llvm.maxnum.f32(float %196, float -2.400000e+02), !dbg !34
  %256 = tail call float @llvm.minnum.f32(float %255, float 2.400000e+02), !dbg !34
  %257 = tail call float @llvm.maxnum.f32(float %197, float -2.400000e+02), !dbg !34
  %258 = tail call float @llvm.minnum.f32(float %257, float 2.400000e+02), !dbg !34
  %259 = tail call float @llvm.maxnum.f32(float %198, float -2.400000e+02), !dbg !34
  %260 = tail call float @llvm.minnum.f32(float %259, float 2.400000e+02), !dbg !34
  %261 = tail call float @llvm.maxnum.f32(float %199, float -2.400000e+02), !dbg !34
  %262 = tail call float @llvm.minnum.f32(float %261, float 2.400000e+02), !dbg !34
  %263 = tail call float @llvm.maxnum.f32(float %200, float -2.400000e+02), !dbg !34
  %264 = tail call float @llvm.minnum.f32(float %263, float 2.400000e+02), !dbg !34
  %265 = tail call i32 asm "v_cvt_pk_fp8_f32 $0, $1, $2", "=v,v,v"(float %202, float %204) #4, !dbg !35
  %266 = trunc i32 %265 to i8, !dbg !35
  %extelt.offset = lshr i32 %265, 8, !dbg !35
  %267 = trunc i32 %extelt.offset to i8, !dbg !35
  %268 = tail call i32 asm "v_cvt_pk_fp8_f32 $0, $1, $2", "=v,v,v"(float %206, float %208) #4, !dbg !35
  %269 = trunc i32 %268 to i8, !dbg !35
  %extelt.offset1 = lshr i32 %268, 8, !dbg !35
  %270 = trunc i32 %extelt.offset1 to i8, !dbg !35
  %271 = tail call i32 asm "v_cvt_pk_fp8_f32 $0, $1, $2", "=v,v,v"(float %210, float %212) #4, !dbg !35
  %272 = trunc i32 %271 to i8, !dbg !35
  %extelt.offset2 = lshr i32 %271, 8, !dbg !35
  %273 = trunc i32 %extelt.offset2 to i8, !dbg !35
  %274 = tail call i32 asm "v_cvt_pk_fp8_f32 $0, $1, $2", "=v,v,v"(float %214, float %216) #4, !dbg !35
  %275 = trunc i32 %274 to i8, !dbg !35
  %extelt.offset3 = lshr i32 %274, 8, !dbg !35
  %276 = trunc i32 %extelt.offset3 to i8, !dbg !35
  %277 = tail call i32 asm "v_cvt_pk_fp8_f32 $0, $1, $2", "=v,v,v"(float %218, float %220) #4, !dbg !35
  %278 = trunc i32 %277 to i8, !dbg !35
  %extelt.offset4 = lshr i32 %277, 8, !dbg !35
  %279 = trunc i32 %extelt.offset4 to i8, !dbg !35
  %280 = tail call i32 asm "v_cvt_pk_fp8_f32 $0, $1, $2", "=v,v,v"(float %222, float %224) #4, !dbg !35
  %281 = trunc i32 %280 to i8, !dbg !35
  %extelt.offset5 = lshr i32 %280, 8, !dbg !35
  %282 = trunc i32 %extelt.offset5 to i8, !dbg !35
  %283 = tail call i32 asm "v_cvt_pk_fp8_f32 $0, $1, $2", "=v,v,v"(float %226, float %228) #4, !dbg !35
  %284 = trunc i32 %283 to i8, !dbg !35
  %extelt.offset6 = lshr i32 %283, 8, !dbg !35
  %285 = trunc i32 %extelt.offset6 to i8, !dbg !35
  %286 = tail call i32 asm "v_cvt_pk_fp8_f32 $0, $1, $2", "=v,v,v"(float %230, float %232) #4, !dbg !35
  %287 = trunc i32 %286 to i8, !dbg !35
  %extelt.offset7 = lshr i32 %286, 8, !dbg !35
  %288 = trunc i32 %extelt.offset7 to i8, !dbg !35
  %289 = tail call i32 asm "v_cvt_pk_fp8_f32 $0, $1, $2", "=v,v,v"(float %234, float %236) #4, !dbg !35
  %290 = trunc i32 %289 to i8, !dbg !35
  %extelt.offset8 = lshr i32 %289, 8, !dbg !35
  %291 = trunc i32 %extelt.offset8 to i8, !dbg !35
  %292 = tail call i32 asm "v_cvt_pk_fp8_f32 $0, $1, $2", "=v,v,v"(float %238, float %240) #4, !dbg !35
  %293 = trunc i32 %292 to i8, !dbg !35
  %extelt.offset9 = lshr i32 %292, 8, !dbg !35
  %294 = trunc i32 %extelt.offset9 to i8, !dbg !35
  %295 = tail call i32 asm "v_cvt_pk_fp8_f32 $0, $1, $2", "=v,v,v"(float %242, float %244) #4, !dbg !35
  %296 = trunc i32 %295 to i8, !dbg !35
  %extelt.offset10 = lshr i32 %295, 8, !dbg !35
  %297 = trunc i32 %extelt.offset10 to i8, !dbg !35
  %298 = tail call i32 asm "v_cvt_pk_fp8_f32 $0, $1, $2", "=v,v,v"(float %246, float %248) #4, !dbg !35
  %299 = trunc i32 %298 to i8, !dbg !35
  %extelt.offset11 = lshr i32 %298, 8, !dbg !35
  %300 = trunc i32 %extelt.offset11 to i8, !dbg !35
  %301 = tail call i32 asm "v_cvt_pk_fp8_f32 $0, $1, $2", "=v,v,v"(float %250, float %252) #4, !dbg !35
  %302 = trunc i32 %301 to i8, !dbg !35
  %extelt.offset12 = lshr i32 %301, 8, !dbg !35
  %303 = trunc i32 %extelt.offset12 to i8, !dbg !35
  %304 = tail call i32 asm "v_cvt_pk_fp8_f32 $0, $1, $2", "=v,v,v"(float %254, float %256) #4, !dbg !35
  %305 = trunc i32 %304 to i8, !dbg !35
  %extelt.offset13 = lshr i32 %304, 8, !dbg !35
  %306 = trunc i32 %extelt.offset13 to i8, !dbg !35
  %307 = tail call i32 asm "v_cvt_pk_fp8_f32 $0, $1, $2", "=v,v,v"(float %258, float %260) #4, !dbg !35
  %308 = trunc i32 %307 to i8, !dbg !35
  %extelt.offset14 = lshr i32 %307, 8, !dbg !35
  %309 = trunc i32 %extelt.offset14 to i8, !dbg !35
  %310 = tail call i32 asm "v_cvt_pk_fp8_f32 $0, $1, $2", "=v,v,v"(float %262, float %264) #4, !dbg !35
  %311 = trunc i32 %310 to i8, !dbg !35
  %extelt.offset15 = lshr i32 %310, 8, !dbg !35
  %312 = trunc i32 %extelt.offset15 to i8, !dbg !35
  %313 = getelementptr i8, ptr addrspace(1) %1, i64 %54, !dbg !36
  %314 = getelementptr i8, ptr addrspace(1) %313, i64 %59, !dbg !37
  %315 = getelementptr i8, ptr addrspace(1) %313, i64 %56, !dbg !37
  %316 = getelementptr i8, ptr addrspace(1) %313, i64 %57, !dbg !37
  %317 = getelementptr i8, ptr addrspace(1) %313, i64 %58, !dbg !37
  br i1 %70, label %.critedge, label %.critedge17, !dbg !38

.critedge:                                        ; preds = %151
  %318 = getelementptr i8, ptr addrspace(1) %1, i64 %53, !dbg !36
  %319 = getelementptr i8, ptr addrspace(1) %318, i64 %58, !dbg !37
  %320 = getelementptr i8, ptr addrspace(1) %318, i64 %57, !dbg !37
  %321 = getelementptr i8, ptr addrspace(1) %318, i64 %56, !dbg !37
  %322 = insertelement <4 x i8> poison, i8 %266, i64 0, !dbg !38
  %323 = insertelement <4 x i8> %322, i8 %267, i64 1, !dbg !38
  %324 = insertelement <4 x i8> %323, i8 %269, i64 2, !dbg !38
  %325 = insertelement <4 x i8> %324, i8 %270, i64 3, !dbg !38
  %326 = getelementptr i8, ptr addrspace(1) %318, i64 %59, !dbg !37
  store <4 x i8> %325, ptr addrspace(1) %326, align 4, !dbg !38
  %327 = insertelement <4 x i8> poison, i8 %272, i64 0, !dbg !38
  %328 = insertelement <4 x i8> %327, i8 %273, i64 1, !dbg !38
  %329 = insertelement <4 x i8> %328, i8 %275, i64 2, !dbg !38
  %330 = insertelement <4 x i8> %329, i8 %276, i64 3, !dbg !38
  store <4 x i8> %330, ptr addrspace(1) %321, align 4, !dbg !38
  %331 = insertelement <4 x i8> poison, i8 %278, i64 0, !dbg !38
  %332 = insertelement <4 x i8> %331, i8 %279, i64 1, !dbg !38
  %333 = insertelement <4 x i8> %332, i8 %281, i64 2, !dbg !38
  %334 = insertelement <4 x i8> %333, i8 %282, i64 3, !dbg !38
  store <4 x i8> %334, ptr addrspace(1) %320, align 4, !dbg !38
  %335 = insertelement <4 x i8> poison, i8 %284, i64 0, !dbg !38
  %336 = insertelement <4 x i8> %335, i8 %285, i64 1, !dbg !38
  %337 = insertelement <4 x i8> %336, i8 %287, i64 2, !dbg !38
  %338 = insertelement <4 x i8> %337, i8 %288, i64 3, !dbg !38
  store <4 x i8> %338, ptr addrspace(1) %319, align 4, !dbg !38
  br label %.critedge17, !dbg !38

.critedge17:                                      ; preds = %151, %.critedge
  br i1 %71, label %.critedge19, label %.critedge21, !dbg !38

.critedge19:                                      ; preds = %.critedge17
  %339 = insertelement <4 x i8> poison, i8 %290, i64 0, !dbg !38
  %340 = insertelement <4 x i8> %339, i8 %291, i64 1, !dbg !38
  %341 = insertelement <4 x i8> %340, i8 %293, i64 2, !dbg !38
  %342 = insertelement <4 x i8> %341, i8 %294, i64 3, !dbg !38
  store <4 x i8> %342, ptr addrspace(1) %314, align 4, !dbg !38
  %343 = insertelement <4 x i8> poison, i8 %296, i64 0, !dbg !38
  %344 = insertelement <4 x i8> %343, i8 %297, i64 1, !dbg !38
  %345 = insertelement <4 x i8> %344, i8 %299, i64 2, !dbg !38
  %346 = insertelement <4 x i8> %345, i8 %300, i64 3, !dbg !38
  store <4 x i8> %346, ptr addrspace(1) %315, align 4, !dbg !38
  %347 = insertelement <4 x i8> poison, i8 %302, i64 0, !dbg !38
  %348 = insertelement <4 x i8> %347, i8 %303, i64 1, !dbg !38
  %349 = insertelement <4 x i8> %348, i8 %305, i64 2, !dbg !38
  %350 = insertelement <4 x i8> %349, i8 %306, i64 3, !dbg !38
  store <4 x i8> %350, ptr addrspace(1) %316, align 4, !dbg !38
  %351 = insertelement <4 x i8> poison, i8 %308, i64 0, !dbg !38
  %352 = insertelement <4 x i8> %351, i8 %309, i64 1, !dbg !38
  %353 = insertelement <4 x i8> %352, i8 %311, i64 2, !dbg !38
  %354 = insertelement <4 x i8> %353, i8 %312, i64 3, !dbg !38
  store <4 x i8> %354, ptr addrspace(1) %317, align 4, !dbg !38
  br label %.critedge21, !dbg !38

.critedge21:                                      ; preds = %.critedge17, %.critedge19
  %355 = sext i32 %40 to i64, !dbg !39
  %356 = getelementptr i8, ptr addrspace(1) %2, i64 %355, !dbg !39
  %357 = sext i32 %41 to i64, !dbg !39
  %358 = getelementptr i8, ptr addrspace(1) %2, i64 %357, !dbg !39
  %359 = sext i32 %42 to i64, !dbg !39
  %360 = getelementptr i8, ptr addrspace(1) %2, i64 %359, !dbg !39
  %361 = sext i32 %43 to i64, !dbg !39
  %362 = getelementptr i8, ptr addrspace(1) %2, i64 %361, !dbg !39
  %363 = mul i32 %50, %4, !dbg !40
  %364 = sext i32 %363 to i64, !dbg !41
  %365 = getelementptr i8, ptr addrspace(1) %356, i64 %364, !dbg !41
  %366 = getelementptr i8, ptr addrspace(1) %358, i64 %364, !dbg !41
  %367 = getelementptr i8, ptr addrspace(1) %360, i64 %364, !dbg !41
  %368 = getelementptr i8, ptr addrspace(1) %362, i64 %364, !dbg !41
  %369 = and i32 %29, 7, !dbg !42
  %370 = and i32 %27, 7, !dbg !42
  %371 = lshr i32 %28, 3, !dbg !42
  %372 = shl nuw nsw i32 %369, 3, !dbg !42
  %373 = or disjoint i32 %372, %371, !dbg !42
  %374 = shl nuw nsw i32 %370, 4, !dbg !42
  %375 = mul nuw nsw i32 %370, 2064, !dbg !42
  %376 = add nuw nsw i32 %373, %375, !dbg !42
  %377 = zext nneg i32 %376 to i64, !dbg !42
  %378 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %377, !dbg !42
  %379 = insertelement <1 x i8> poison, i8 %266, i64 0, !dbg !42
  store <1 x i8> %379, ptr addrspace(3) %378, align 1, !dbg !42
  %380 = or disjoint i32 %374, 1, !dbg !42
  %381 = mul nuw nsw i32 %380, 129, !dbg !42
  %382 = add nuw nsw i32 %381, %373, !dbg !42
  %383 = zext nneg i32 %382 to i64, !dbg !42
  %384 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %383, !dbg !42
  %385 = insertelement <1 x i8> poison, i8 %267, i64 0, !dbg !42
  store <1 x i8> %385, ptr addrspace(3) %384, align 1, !dbg !42
  %386 = or disjoint i32 %374, 2, !dbg !42
  %387 = mul nuw nsw i32 %386, 129, !dbg !42
  %388 = add nuw nsw i32 %387, %373, !dbg !42
  %389 = zext nneg i32 %388 to i64, !dbg !42
  %390 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %389, !dbg !42
  %391 = insertelement <1 x i8> poison, i8 %269, i64 0, !dbg !42
  store <1 x i8> %391, ptr addrspace(3) %390, align 1, !dbg !42
  %392 = or disjoint i32 %374, 3, !dbg !42
  %393 = mul nuw nsw i32 %392, 129, !dbg !42
  %394 = add nuw nsw i32 %393, %373, !dbg !42
  %395 = zext nneg i32 %394 to i64, !dbg !42
  %396 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %395, !dbg !42
  %397 = insertelement <1 x i8> poison, i8 %270, i64 0, !dbg !42
  store <1 x i8> %397, ptr addrspace(3) %396, align 1, !dbg !42
  %398 = or disjoint i32 %374, 4, !dbg !42
  %399 = mul nuw nsw i32 %398, 129, !dbg !42
  %400 = add nuw nsw i32 %399, %373, !dbg !42
  %401 = zext nneg i32 %400 to i64, !dbg !42
  %402 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %401, !dbg !42
  %403 = insertelement <1 x i8> poison, i8 %272, i64 0, !dbg !42
  store <1 x i8> %403, ptr addrspace(3) %402, align 1, !dbg !42
  %404 = or disjoint i32 %374, 5, !dbg !42
  %405 = mul nuw nsw i32 %404, 129, !dbg !42
  %406 = add nuw nsw i32 %405, %373, !dbg !42
  %407 = zext nneg i32 %406 to i64, !dbg !42
  %408 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %407, !dbg !42
  %409 = insertelement <1 x i8> poison, i8 %273, i64 0, !dbg !42
  store <1 x i8> %409, ptr addrspace(3) %408, align 1, !dbg !42
  %410 = or disjoint i32 %374, 6, !dbg !42
  %411 = mul nuw nsw i32 %410, 129, !dbg !42
  %412 = add nuw nsw i32 %411, %373, !dbg !42
  %413 = zext nneg i32 %412 to i64, !dbg !42
  %414 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %413, !dbg !42
  %415 = insertelement <1 x i8> poison, i8 %275, i64 0, !dbg !42
  store <1 x i8> %415, ptr addrspace(3) %414, align 1, !dbg !42
  %416 = or disjoint i32 %374, 7, !dbg !42
  %417 = mul nuw nsw i32 %416, 129, !dbg !42
  %418 = add nuw nsw i32 %417, %373, !dbg !42
  %419 = zext nneg i32 %418 to i64, !dbg !42
  %420 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %419, !dbg !42
  %421 = insertelement <1 x i8> poison, i8 %276, i64 0, !dbg !42
  store <1 x i8> %421, ptr addrspace(3) %420, align 1, !dbg !42
  %422 = or disjoint i32 %374, 8, !dbg !42
  %423 = mul nuw nsw i32 %422, 129, !dbg !42
  %424 = add nuw nsw i32 %423, %373, !dbg !42
  %425 = zext nneg i32 %424 to i64, !dbg !42
  %426 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %425, !dbg !42
  %427 = insertelement <1 x i8> poison, i8 %278, i64 0, !dbg !42
  store <1 x i8> %427, ptr addrspace(3) %426, align 1, !dbg !42
  %428 = or disjoint i32 %374, 9, !dbg !42
  %429 = mul nuw nsw i32 %428, 129, !dbg !42
  %430 = add nuw nsw i32 %429, %373, !dbg !42
  %431 = zext nneg i32 %430 to i64, !dbg !42
  %432 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %431, !dbg !42
  %433 = insertelement <1 x i8> poison, i8 %279, i64 0, !dbg !42
  store <1 x i8> %433, ptr addrspace(3) %432, align 1, !dbg !42
  %434 = or disjoint i32 %374, 10, !dbg !42
  %435 = mul nuw nsw i32 %434, 129, !dbg !42
  %436 = add nuw nsw i32 %435, %373, !dbg !42
  %437 = zext nneg i32 %436 to i64, !dbg !42
  %438 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %437, !dbg !42
  %439 = insertelement <1 x i8> poison, i8 %281, i64 0, !dbg !42
  store <1 x i8> %439, ptr addrspace(3) %438, align 1, !dbg !42
  %440 = or disjoint i32 %374, 11, !dbg !42
  %441 = mul nuw nsw i32 %440, 129, !dbg !42
  %442 = add nuw nsw i32 %441, %373, !dbg !42
  %443 = zext nneg i32 %442 to i64, !dbg !42
  %444 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %443, !dbg !42
  %445 = insertelement <1 x i8> poison, i8 %282, i64 0, !dbg !42
  store <1 x i8> %445, ptr addrspace(3) %444, align 1, !dbg !42
  %446 = or disjoint i32 %374, 12, !dbg !42
  %447 = mul nuw nsw i32 %446, 129, !dbg !42
  %448 = add nuw nsw i32 %447, %373, !dbg !42
  %449 = zext nneg i32 %448 to i64, !dbg !42
  %450 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %449, !dbg !42
  %451 = insertelement <1 x i8> poison, i8 %284, i64 0, !dbg !42
  store <1 x i8> %451, ptr addrspace(3) %450, align 1, !dbg !42
  %452 = or disjoint i32 %374, 13, !dbg !42
  %453 = mul nuw nsw i32 %452, 129, !dbg !42
  %454 = add nuw nsw i32 %453, %373, !dbg !42
  %455 = zext nneg i32 %454 to i64, !dbg !42
  %456 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %455, !dbg !42
  %457 = insertelement <1 x i8> poison, i8 %285, i64 0, !dbg !42
  store <1 x i8> %457, ptr addrspace(3) %456, align 1, !dbg !42
  %458 = or disjoint i32 %374, 14, !dbg !42
  %459 = mul nuw nsw i32 %458, 129, !dbg !42
  %460 = add nuw nsw i32 %459, %373, !dbg !42
  %461 = zext nneg i32 %460 to i64, !dbg !42
  %462 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %461, !dbg !42
  %463 = insertelement <1 x i8> poison, i8 %287, i64 0, !dbg !42
  store <1 x i8> %463, ptr addrspace(3) %462, align 1, !dbg !42
  %464 = or disjoint i32 %374, 15, !dbg !42
  %465 = mul nuw nsw i32 %464, 129, !dbg !42
  %466 = add nuw nsw i32 %465, %373, !dbg !42
  %467 = zext nneg i32 %466 to i64, !dbg !42
  %468 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %467, !dbg !42
  %469 = insertelement <1 x i8> poison, i8 %288, i64 0, !dbg !42
  store <1 x i8> %469, ptr addrspace(3) %468, align 1, !dbg !42
  %470 = or disjoint i32 %373, 64, !dbg !42
  %471 = add nuw nsw i32 %470, %375, !dbg !42
  %472 = zext nneg i32 %471 to i64, !dbg !42
  %473 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %472, !dbg !42
  %474 = insertelement <1 x i8> poison, i8 %290, i64 0, !dbg !42
  store <1 x i8> %474, ptr addrspace(3) %473, align 1, !dbg !42
  %475 = add nuw nsw i32 %470, %381, !dbg !42
  %476 = zext nneg i32 %475 to i64, !dbg !42
  %477 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %476, !dbg !42
  %478 = insertelement <1 x i8> poison, i8 %291, i64 0, !dbg !42
  store <1 x i8> %478, ptr addrspace(3) %477, align 1, !dbg !42
  %479 = add nuw nsw i32 %470, %387, !dbg !42
  %480 = zext nneg i32 %479 to i64, !dbg !42
  %481 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %480, !dbg !42
  %482 = insertelement <1 x i8> poison, i8 %293, i64 0, !dbg !42
  store <1 x i8> %482, ptr addrspace(3) %481, align 1, !dbg !42
  %483 = add nuw nsw i32 %470, %393, !dbg !42
  %484 = zext nneg i32 %483 to i64, !dbg !42
  %485 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %484, !dbg !42
  %486 = insertelement <1 x i8> poison, i8 %294, i64 0, !dbg !42
  store <1 x i8> %486, ptr addrspace(3) %485, align 1, !dbg !42
  %487 = add nuw nsw i32 %470, %399, !dbg !42
  %488 = zext nneg i32 %487 to i64, !dbg !42
  %489 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %488, !dbg !42
  %490 = insertelement <1 x i8> poison, i8 %296, i64 0, !dbg !42
  store <1 x i8> %490, ptr addrspace(3) %489, align 1, !dbg !42
  %491 = add nuw nsw i32 %470, %405, !dbg !42
  %492 = zext nneg i32 %491 to i64, !dbg !42
  %493 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %492, !dbg !42
  %494 = insertelement <1 x i8> poison, i8 %297, i64 0, !dbg !42
  store <1 x i8> %494, ptr addrspace(3) %493, align 1, !dbg !42
  %495 = add nuw nsw i32 %470, %411, !dbg !42
  %496 = zext nneg i32 %495 to i64, !dbg !42
  %497 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %496, !dbg !42
  %498 = insertelement <1 x i8> poison, i8 %299, i64 0, !dbg !42
  store <1 x i8> %498, ptr addrspace(3) %497, align 1, !dbg !42
  %499 = add nuw nsw i32 %470, %417, !dbg !42
  %500 = zext nneg i32 %499 to i64, !dbg !42
  %501 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %500, !dbg !42
  %502 = insertelement <1 x i8> poison, i8 %300, i64 0, !dbg !42
  store <1 x i8> %502, ptr addrspace(3) %501, align 1, !dbg !42
  %503 = add nuw nsw i32 %470, %423, !dbg !42
  %504 = zext nneg i32 %503 to i64, !dbg !42
  %505 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %504, !dbg !42
  %506 = insertelement <1 x i8> poison, i8 %302, i64 0, !dbg !42
  store <1 x i8> %506, ptr addrspace(3) %505, align 1, !dbg !42
  %507 = add nuw nsw i32 %470, %429, !dbg !42
  %508 = zext nneg i32 %507 to i64, !dbg !42
  %509 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %508, !dbg !42
  %510 = insertelement <1 x i8> poison, i8 %303, i64 0, !dbg !42
  store <1 x i8> %510, ptr addrspace(3) %509, align 1, !dbg !42
  %511 = add nuw nsw i32 %470, %435, !dbg !42
  %512 = zext nneg i32 %511 to i64, !dbg !42
  %513 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %512, !dbg !42
  %514 = insertelement <1 x i8> poison, i8 %305, i64 0, !dbg !42
  store <1 x i8> %514, ptr addrspace(3) %513, align 1, !dbg !42
  %515 = add nuw nsw i32 %470, %441, !dbg !42
  %516 = zext nneg i32 %515 to i64, !dbg !42
  %517 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %516, !dbg !42
  %518 = insertelement <1 x i8> poison, i8 %306, i64 0, !dbg !42
  store <1 x i8> %518, ptr addrspace(3) %517, align 1, !dbg !42
  %519 = add nuw nsw i32 %470, %447, !dbg !42
  %520 = zext nneg i32 %519 to i64, !dbg !42
  %521 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %520, !dbg !42
  %522 = insertelement <1 x i8> poison, i8 %308, i64 0, !dbg !42
  store <1 x i8> %522, ptr addrspace(3) %521, align 1, !dbg !42
  %523 = add nuw nsw i32 %470, %453, !dbg !42
  %524 = zext nneg i32 %523 to i64, !dbg !42
  %525 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %524, !dbg !42
  %526 = insertelement <1 x i8> poison, i8 %309, i64 0, !dbg !42
  store <1 x i8> %526, ptr addrspace(3) %525, align 1, !dbg !42
  %527 = add nuw nsw i32 %470, %459, !dbg !42
  %528 = zext nneg i32 %527 to i64, !dbg !42
  %529 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %528, !dbg !42
  %530 = insertelement <1 x i8> poison, i8 %311, i64 0, !dbg !42
  store <1 x i8> %530, ptr addrspace(3) %529, align 1, !dbg !42
  %531 = add nuw nsw i32 %470, %465, !dbg !42
  %532 = zext nneg i32 %531 to i64, !dbg !42
  %533 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %532, !dbg !42
  %534 = insertelement <1 x i8> poison, i8 %312, i64 0, !dbg !42
  store <1 x i8> %534, ptr addrspace(3) %533, align 1, !dbg !42
  fence syncscope("workgroup") release, !dbg !42
  tail call void @llvm.amdgcn.s.barrier(), !dbg !42
  fence syncscope("workgroup") acquire, !dbg !42
  %535 = mul nuw nsw i32 %470, 129, !dbg !42
  %536 = add nuw nsw i32 %535, %374, !dbg !42
  %537 = zext nneg i32 %536 to i64, !dbg !42
  %538 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %537, !dbg !42
  %539 = load i8, ptr addrspace(3) %538, align 1, !dbg !42
  %540 = add nuw nsw i32 %535, %380, !dbg !42
  %541 = zext nneg i32 %540 to i64, !dbg !42
  %542 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %541, !dbg !42
  %543 = load i8, ptr addrspace(3) %542, align 1, !dbg !42
  %544 = add nuw nsw i32 %535, %386, !dbg !42
  %545 = zext nneg i32 %544 to i64, !dbg !42
  %546 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %545, !dbg !42
  %547 = load i8, ptr addrspace(3) %546, align 1, !dbg !42
  %548 = add nuw nsw i32 %535, %392, !dbg !42
  %549 = zext nneg i32 %548 to i64, !dbg !42
  %550 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %549, !dbg !42
  %551 = load i8, ptr addrspace(3) %550, align 1, !dbg !42
  %552 = add nuw nsw i32 %535, %398, !dbg !42
  %553 = zext nneg i32 %552 to i64, !dbg !42
  %554 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %553, !dbg !42
  %555 = load i8, ptr addrspace(3) %554, align 1, !dbg !42
  %556 = add nuw nsw i32 %535, %404, !dbg !42
  %557 = zext nneg i32 %556 to i64, !dbg !42
  %558 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %557, !dbg !42
  %559 = load i8, ptr addrspace(3) %558, align 1, !dbg !42
  %560 = add nuw nsw i32 %535, %410, !dbg !42
  %561 = zext nneg i32 %560 to i64, !dbg !42
  %562 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %561, !dbg !42
  %563 = load i8, ptr addrspace(3) %562, align 1, !dbg !42
  %564 = add nuw nsw i32 %535, %416, !dbg !42
  %565 = zext nneg i32 %564 to i64, !dbg !42
  %566 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %565, !dbg !42
  %567 = load i8, ptr addrspace(3) %566, align 1, !dbg !42
  %568 = add nuw nsw i32 %535, %422, !dbg !42
  %569 = zext nneg i32 %568 to i64, !dbg !42
  %570 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %569, !dbg !42
  %571 = load i8, ptr addrspace(3) %570, align 1, !dbg !42
  %572 = add nuw nsw i32 %535, %428, !dbg !42
  %573 = zext nneg i32 %572 to i64, !dbg !42
  %574 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %573, !dbg !42
  %575 = load i8, ptr addrspace(3) %574, align 1, !dbg !42
  %576 = add nuw nsw i32 %535, %434, !dbg !42
  %577 = zext nneg i32 %576 to i64, !dbg !42
  %578 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %577, !dbg !42
  %579 = load i8, ptr addrspace(3) %578, align 1, !dbg !42
  %580 = add nuw nsw i32 %535, %440, !dbg !42
  %581 = zext nneg i32 %580 to i64, !dbg !42
  %582 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %581, !dbg !42
  %583 = load i8, ptr addrspace(3) %582, align 1, !dbg !42
  %584 = add nuw nsw i32 %535, %446, !dbg !42
  %585 = zext nneg i32 %584 to i64, !dbg !42
  %586 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %585, !dbg !42
  %587 = load i8, ptr addrspace(3) %586, align 1, !dbg !42
  %588 = add nuw nsw i32 %535, %452, !dbg !42
  %589 = zext nneg i32 %588 to i64, !dbg !42
  %590 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %589, !dbg !42
  %591 = load i8, ptr addrspace(3) %590, align 1, !dbg !42
  %592 = add nuw nsw i32 %535, %458, !dbg !42
  %593 = zext nneg i32 %592 to i64, !dbg !42
  %594 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %593, !dbg !42
  %595 = load i8, ptr addrspace(3) %594, align 1, !dbg !42
  %596 = add nuw nsw i32 %535, %464, !dbg !42
  %597 = zext nneg i32 %596 to i64, !dbg !42
  %598 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %597, !dbg !42
  %599 = load i8, ptr addrspace(3) %598, align 1, !dbg !42
  br i1 %72, label %.critedge23, label %.critedge25, !dbg !42

.critedge23:                                      ; preds = %.critedge21
  %600 = mul nuw nsw i32 %373, 129, !dbg !42
  %601 = add nuw nsw i32 %600, %464, !dbg !42
  %602 = zext nneg i32 %601 to i64, !dbg !42
  %603 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %602, !dbg !42
  %604 = load <1 x i8>, ptr addrspace(3) %603, align 1, !dbg !42
  %605 = shufflevector <1 x i8> %604, <1 x i8> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %606 = add nuw nsw i32 %600, %458, !dbg !42
  %607 = zext nneg i32 %606 to i64, !dbg !42
  %608 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %607, !dbg !42
  %609 = load <1 x i8>, ptr addrspace(3) %608, align 1, !dbg !42
  %610 = shufflevector <1 x i8> %609, <1 x i8> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %611 = add nuw nsw i32 %600, %452, !dbg !42
  %612 = zext nneg i32 %611 to i64, !dbg !42
  %613 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %612, !dbg !42
  %614 = load <1 x i8>, ptr addrspace(3) %613, align 1, !dbg !42
  %615 = add nuw nsw i32 %600, %446, !dbg !42
  %616 = zext nneg i32 %615 to i64, !dbg !42
  %617 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %616, !dbg !42
  %618 = load <1 x i8>, ptr addrspace(3) %617, align 1, !dbg !42
  %619 = add nuw nsw i32 %600, %440, !dbg !42
  %620 = zext nneg i32 %619 to i64, !dbg !42
  %621 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %620, !dbg !42
  %622 = load <1 x i8>, ptr addrspace(3) %621, align 1, !dbg !42
  %623 = shufflevector <1 x i8> %622, <1 x i8> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %624 = add nuw nsw i32 %600, %434, !dbg !42
  %625 = zext nneg i32 %624 to i64, !dbg !42
  %626 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %625, !dbg !42
  %627 = load <1 x i8>, ptr addrspace(3) %626, align 1, !dbg !42
  %628 = shufflevector <1 x i8> %627, <1 x i8> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %629 = add nuw nsw i32 %600, %428, !dbg !42
  %630 = zext nneg i32 %629 to i64, !dbg !42
  %631 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %630, !dbg !42
  %632 = load <1 x i8>, ptr addrspace(3) %631, align 1, !dbg !42
  %633 = add nuw nsw i32 %600, %422, !dbg !42
  %634 = zext nneg i32 %633 to i64, !dbg !42
  %635 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %634, !dbg !42
  %636 = load <1 x i8>, ptr addrspace(3) %635, align 1, !dbg !42
  %637 = add nuw nsw i32 %600, %416, !dbg !42
  %638 = zext nneg i32 %637 to i64, !dbg !42
  %639 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %638, !dbg !42
  %640 = load <1 x i8>, ptr addrspace(3) %639, align 1, !dbg !42
  %641 = shufflevector <1 x i8> %640, <1 x i8> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %642 = add nuw nsw i32 %600, %410, !dbg !42
  %643 = zext nneg i32 %642 to i64, !dbg !42
  %644 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %643, !dbg !42
  %645 = load <1 x i8>, ptr addrspace(3) %644, align 1, !dbg !42
  %646 = shufflevector <1 x i8> %645, <1 x i8> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %647 = add nuw nsw i32 %600, %404, !dbg !42
  %648 = zext nneg i32 %647 to i64, !dbg !42
  %649 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %648, !dbg !42
  %650 = load <1 x i8>, ptr addrspace(3) %649, align 1, !dbg !42
  %651 = add nuw nsw i32 %600, %398, !dbg !42
  %652 = zext nneg i32 %651 to i64, !dbg !42
  %653 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %652, !dbg !42
  %654 = load <1 x i8>, ptr addrspace(3) %653, align 1, !dbg !42
  %655 = mul i32 %49, %4, !dbg !40
  %656 = sext i32 %655 to i64, !dbg !41
  %657 = getelementptr i8, ptr addrspace(1) %362, i64 %656, !dbg !41
  %658 = getelementptr i8, ptr addrspace(1) %360, i64 %656, !dbg !41
  %659 = getelementptr i8, ptr addrspace(1) %358, i64 %656, !dbg !41
  %660 = add nuw nsw i32 %600, %374, !dbg !42
  %661 = zext nneg i32 %660 to i64, !dbg !42
  %662 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %661, !dbg !42
  %663 = load <1 x i8>, ptr addrspace(3) %662, align 1, !dbg !42
  %664 = add nuw nsw i32 %600, %380, !dbg !42
  %665 = zext nneg i32 %664 to i64, !dbg !42
  %666 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %665, !dbg !42
  %667 = load <1 x i8>, ptr addrspace(3) %666, align 1, !dbg !42
  %668 = shufflevector <1 x i8> %663, <1 x i8> %667, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !42
  %669 = add nuw nsw i32 %600, %386, !dbg !42
  %670 = zext nneg i32 %669 to i64, !dbg !42
  %671 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %670, !dbg !42
  %672 = load <1 x i8>, ptr addrspace(3) %671, align 1, !dbg !42
  %673 = shufflevector <1 x i8> %672, <1 x i8> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %674 = shufflevector <4 x i8> %668, <4 x i8> %673, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !42
  %675 = add nuw nsw i32 %600, %392, !dbg !42
  %676 = zext nneg i32 %675 to i64, !dbg !42
  %677 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %676, !dbg !42
  %678 = load <1 x i8>, ptr addrspace(3) %677, align 1, !dbg !42
  %679 = shufflevector <1 x i8> %678, <1 x i8> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %680 = shufflevector <4 x i8> %674, <4 x i8> %679, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !42
  %681 = getelementptr i8, ptr addrspace(1) %356, i64 %656, !dbg !41
  store <4 x i8> %680, ptr addrspace(1) %681, align 4, !dbg !42
  %682 = shufflevector <1 x i8> %654, <1 x i8> %650, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !42
  %683 = shufflevector <4 x i8> %682, <4 x i8> %646, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !42
  %684 = shufflevector <4 x i8> %683, <4 x i8> %641, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !42
  store <4 x i8> %684, ptr addrspace(1) %659, align 4, !dbg !42
  %685 = shufflevector <1 x i8> %636, <1 x i8> %632, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !42
  %686 = shufflevector <4 x i8> %685, <4 x i8> %628, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !42
  %687 = shufflevector <4 x i8> %686, <4 x i8> %623, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !42
  store <4 x i8> %687, ptr addrspace(1) %658, align 4, !dbg !42
  %688 = shufflevector <1 x i8> %618, <1 x i8> %614, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !42
  %689 = shufflevector <4 x i8> %688, <4 x i8> %610, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !42
  %690 = shufflevector <4 x i8> %689, <4 x i8> %605, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !42
  store <4 x i8> %690, ptr addrspace(1) %657, align 4, !dbg !42
  br label %.critedge25, !dbg !42

.critedge25:                                      ; preds = %.critedge21, %.critedge23
  br i1 %73, label %.critedge27, label %.critedge29, !dbg !42

.critedge27:                                      ; preds = %.critedge25
  %691 = insertelement <4 x i8> poison, i8 %539, i64 0, !dbg !42
  %692 = insertelement <4 x i8> %691, i8 %543, i64 1, !dbg !42
  %693 = insertelement <4 x i8> %692, i8 %547, i64 2, !dbg !42
  %694 = insertelement <4 x i8> %693, i8 %551, i64 3, !dbg !42
  store <4 x i8> %694, ptr addrspace(1) %365, align 4, !dbg !42
  %695 = insertelement <4 x i8> poison, i8 %555, i64 0, !dbg !42
  %696 = insertelement <4 x i8> %695, i8 %559, i64 1, !dbg !42
  %697 = insertelement <4 x i8> %696, i8 %563, i64 2, !dbg !42
  %698 = insertelement <4 x i8> %697, i8 %567, i64 3, !dbg !42
  store <4 x i8> %698, ptr addrspace(1) %366, align 4, !dbg !42
  %699 = insertelement <4 x i8> poison, i8 %571, i64 0, !dbg !42
  %700 = insertelement <4 x i8> %699, i8 %575, i64 1, !dbg !42
  %701 = insertelement <4 x i8> %700, i8 %579, i64 2, !dbg !42
  %702 = insertelement <4 x i8> %701, i8 %583, i64 3, !dbg !42
  store <4 x i8> %702, ptr addrspace(1) %367, align 4, !dbg !42
  %703 = insertelement <4 x i8> poison, i8 %587, i64 0, !dbg !42
  %704 = insertelement <4 x i8> %703, i8 %591, i64 1, !dbg !42
  %705 = insertelement <4 x i8> %704, i8 %595, i64 2, !dbg !42
  %706 = insertelement <4 x i8> %705, i8 %599, i64 3, !dbg !42
  store <4 x i8> %706, ptr addrspace(1) %368, align 4, !dbg !42
  br label %.critedge29, !dbg !42

.critedge29:                                      ; preds = %.critedge25, %.critedge27
  %707 = tail call float @llvm.fabs.f32(float %114), !dbg !43
  %708 = tail call float @llvm.fabs.f32(float %113), !dbg !43
  %709 = tail call float @llvm.fabs.f32(float %112), !dbg !43
  %710 = tail call float @llvm.fabs.f32(float %111), !dbg !43
  %711 = tail call float @llvm.fabs.f32(float %115), !dbg !43
  %712 = tail call float @llvm.fabs.f32(float %116), !dbg !43
  %713 = tail call float @llvm.fabs.f32(float %117), !dbg !43
  %714 = tail call float @llvm.fabs.f32(float %118), !dbg !43
  %715 = tail call float @llvm.fabs.f32(float %110), !dbg !43
  %716 = tail call float @llvm.fabs.f32(float %109), !dbg !43
  %717 = tail call float @llvm.fabs.f32(float %108), !dbg !43
  %718 = tail call float @llvm.fabs.f32(float %107), !dbg !43
  %719 = tail call float @llvm.fabs.f32(float %120), !dbg !43
  %720 = tail call float @llvm.fabs.f32(float %121), !dbg !43
  %721 = tail call float @llvm.fabs.f32(float %122), !dbg !43
  %722 = tail call float @llvm.fabs.f32(float %123), !dbg !43
  %723 = tail call float @llvm.fabs.f32(float %159), !dbg !43
  %724 = tail call float @llvm.fabs.f32(float %158), !dbg !43
  %725 = tail call float @llvm.fabs.f32(float %157), !dbg !43
  %726 = tail call float @llvm.fabs.f32(float %156), !dbg !43
  %727 = tail call float @llvm.fabs.f32(float %160), !dbg !43
  %728 = tail call float @llvm.fabs.f32(float %161), !dbg !43
  %729 = tail call float @llvm.fabs.f32(float %162), !dbg !43
  %730 = tail call float @llvm.fabs.f32(float %163), !dbg !43
  %731 = tail call float @llvm.fabs.f32(float %155), !dbg !43
  %732 = tail call float @llvm.fabs.f32(float %154), !dbg !43
  %733 = tail call float @llvm.fabs.f32(float %153), !dbg !43
  %734 = tail call float @llvm.fabs.f32(float %152), !dbg !43
  %735 = tail call float @llvm.fabs.f32(float %165), !dbg !43
  %736 = tail call float @llvm.fabs.f32(float %166), !dbg !43
  %737 = tail call float @llvm.fabs.f32(float %167), !dbg !43
  %738 = tail call float @llvm.fabs.f32(float %168), !dbg !43
  fence syncscope("workgroup") release, !dbg !44
  tail call void @llvm.amdgcn.s.barrier(), !dbg !44
  fence syncscope("workgroup") acquire, !dbg !44
  %739 = tail call float @llvm.maxnum.f32(float %707, float %708), !dbg !48
  %740 = tail call float @llvm.maxnum.f32(float %739, float %709), !dbg !48
  %741 = tail call float @llvm.maxnum.f32(float %740, float %710), !dbg !48
  %742 = tail call float @llvm.maxnum.f32(float %741, float %711), !dbg !48
  %743 = tail call float @llvm.maxnum.f32(float %742, float %712), !dbg !48
  %744 = tail call float @llvm.maxnum.f32(float %743, float %713), !dbg !48
  %745 = tail call float @llvm.maxnum.f32(float %744, float %714), !dbg !48
  %746 = tail call float @llvm.maxnum.f32(float %745, float %715), !dbg !48
  %747 = tail call float @llvm.maxnum.f32(float %746, float %716), !dbg !48
  %748 = tail call float @llvm.maxnum.f32(float %747, float %717), !dbg !48
  %749 = tail call float @llvm.maxnum.f32(float %748, float %718), !dbg !48
  %750 = tail call float @llvm.maxnum.f32(float %749, float %719), !dbg !48
  %751 = tail call float @llvm.maxnum.f32(float %750, float %720), !dbg !48
  %752 = tail call float @llvm.maxnum.f32(float %751, float %721), !dbg !48
  %753 = tail call float @llvm.maxnum.f32(float %752, float %722), !dbg !48
  %754 = tail call float @llvm.maxnum.f32(float %753, float %723), !dbg !48
  %755 = tail call float @llvm.maxnum.f32(float %754, float %724), !dbg !48
  %756 = tail call float @llvm.maxnum.f32(float %755, float %725), !dbg !48
  %757 = tail call float @llvm.maxnum.f32(float %756, float %726), !dbg !48
  %758 = tail call float @llvm.maxnum.f32(float %757, float %727), !dbg !48
  %759 = tail call float @llvm.maxnum.f32(float %758, float %728), !dbg !48
  %760 = tail call float @llvm.maxnum.f32(float %759, float %729), !dbg !48
  %761 = tail call float @llvm.maxnum.f32(float %760, float %730), !dbg !48
  %762 = tail call float @llvm.maxnum.f32(float %761, float %731), !dbg !48
  %763 = tail call float @llvm.maxnum.f32(float %762, float %732), !dbg !48
  %764 = tail call float @llvm.maxnum.f32(float %763, float %733), !dbg !48
  %765 = tail call float @llvm.maxnum.f32(float %764, float %734), !dbg !48
  %766 = tail call float @llvm.maxnum.f32(float %765, float %735), !dbg !48
  %767 = tail call float @llvm.maxnum.f32(float %766, float %736), !dbg !48
  %768 = tail call float @llvm.maxnum.f32(float %767, float %737), !dbg !48
  %769 = tail call float @llvm.maxnum.f32(float %768, float %738), !dbg !48
  %770 = bitcast float %769 to i32, !dbg !44
  %771 = shl i32 %27, 2, !dbg !44
  %772 = xor i32 %771, 128, !dbg !44
  %773 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %772, i32 %770), !dbg !44
  %774 = bitcast i32 %773 to float, !dbg !44
  %775 = tail call float @llvm.maxnum.f32(float %769, float %774), !dbg !48
  %776 = bitcast float %775 to i32, !dbg !44
  %777 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %776, i32 16415), !dbg !44
  %778 = bitcast i32 %777 to float, !dbg !44
  %779 = tail call float @llvm.maxnum.f32(float %775, float %778), !dbg !48
  %780 = bitcast float %779 to i32, !dbg !44
  %781 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %780, i32 8223), !dbg !44
  %782 = bitcast i32 %781 to float, !dbg !44
  %783 = tail call float @llvm.maxnum.f32(float %779, float %782), !dbg !48
  %784 = bitcast float %783 to i32, !dbg !44
  %785 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %784, i32 4127), !dbg !44
  %786 = bitcast i32 %785 to float, !dbg !44
  %787 = tail call float @llvm.maxnum.f32(float %783, float %786), !dbg !48
  %788 = bitcast float %787 to i32, !dbg !44
  %789 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %788, i32 2079), !dbg !44
  %790 = bitcast i32 %789 to float, !dbg !44
  %791 = tail call float @llvm.maxnum.f32(float %787, float %790), !dbg !48
  %792 = bitcast float %791 to i32, !dbg !44
  %793 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %792, i32 1055), !dbg !44
  %794 = icmp eq i32 %28, 0, !dbg !44
  br i1 %794, label %795, label %800, !dbg !44

795:                                              ; preds = %.critedge29
  %796 = zext nneg i32 %369 to i64, !dbg !44
  %797 = getelementptr float, ptr addrspace(3) @global_smem, i64 %796, !dbg !44
  %798 = bitcast i32 %793 to float, !dbg !44
  %799 = tail call float @llvm.maxnum.f32(float %791, float %798), !dbg !48
  store float %799, ptr addrspace(3) %797, align 4, !dbg !44
  br label %800, !dbg !44

800:                                              ; preds = %795, %.critedge29
  fence syncscope("workgroup") release, !dbg !44
  tail call void @llvm.amdgcn.s.barrier(), !dbg !44
  fence syncscope("workgroup") acquire, !dbg !44
  %801 = icmp slt i32 %27, 8, !dbg !44
  %802 = sext i32 %27 to i64, !dbg !44
  %803 = getelementptr float, ptr addrspace(3) @global_smem, i64 %802, !dbg !44
  br i1 %801, label %804, label %806, !dbg !44

804:                                              ; preds = %800
  %805 = load float, ptr addrspace(3) %803, align 4, !dbg !44
  br label %806, !dbg !44

806:                                              ; preds = %800, %804
  %807 = phi float [ %805, %804 ], [ 0.000000e+00, %800 ]
  %808 = bitcast float %807 to i32, !dbg !44
  %809 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %808, i32 4127), !dbg !44
  %810 = bitcast i32 %809 to float, !dbg !44
  %811 = tail call float @llvm.maxnum.f32(float %807, float %810), !dbg !48
  %812 = bitcast float %811 to i32, !dbg !44
  %813 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %812, i32 2079), !dbg !44
  %814 = bitcast i32 %813 to float, !dbg !44
  %815 = tail call float @llvm.maxnum.f32(float %811, float %814), !dbg !48
  %816 = bitcast float %815 to i32, !dbg !44
  %817 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %816, i32 1055), !dbg !44
  %818 = icmp eq i32 %370, 0, !dbg !44
  %819 = and i1 %801, %818, !dbg !44
  br i1 %819, label %820, label %823, !dbg !44

820:                                              ; preds = %806
  %821 = bitcast i32 %817 to float, !dbg !44
  %822 = tail call float @llvm.maxnum.f32(float %815, float %821), !dbg !48
  store float %822, ptr addrspace(3) %803, align 4, !dbg !44
  br label %823, !dbg !44

823:                                              ; preds = %820, %806
  fence syncscope("workgroup") release, !dbg !44
  tail call void @llvm.amdgcn.s.barrier(), !dbg !44
  fence syncscope("workgroup") acquire, !dbg !44
  %824 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !44
  %825 = bitcast float %824 to i32, !dbg !50
  %826 = fcmp oge float %824, 0.000000e+00, !dbg !50
  %827 = fcmp olt float %824, 0.000000e+00, !dbg !50
  fence syncscope("workgroup") release, !dbg !50
  tail call void @llvm.amdgcn.s.barrier(), !dbg !50
  fence syncscope("workgroup") acquire, !dbg !50
  %828 = icmp slt i32 %27, 1, !dbg !50
  %829 = and i1 %828, %826, !dbg !50
  br i1 %829, label %830, label %832, !dbg !50

830:                                              ; preds = %823
  %831 = atomicrmw max ptr addrspace(1) %8, i32 %825 syncscope("agent") monotonic, align 4, !dbg !50
  store i32 %831, ptr addrspace(3) @global_smem, align 16, !dbg !50
  br label %832, !dbg !50

832:                                              ; preds = %830, %823
  fence syncscope("workgroup") release, !dbg !50
  tail call void @llvm.amdgcn.s.barrier(), !dbg !50
  fence syncscope("workgroup") acquire, !dbg !50
  fence syncscope("workgroup") release, !dbg !50
  tail call void @llvm.amdgcn.s.barrier(), !dbg !50
  fence syncscope("workgroup") acquire, !dbg !50
  fence syncscope("workgroup") release, !dbg !50
  tail call void @llvm.amdgcn.s.barrier(), !dbg !50
  fence syncscope("workgroup") acquire, !dbg !50
  %833 = and i1 %828, %827, !dbg !50
  br i1 %833, label %834, label %836, !dbg !50

834:                                              ; preds = %832
  %835 = atomicrmw umin ptr addrspace(1) %8, i32 %825 syncscope("agent") monotonic, align 4, !dbg !50
  store i32 %835, ptr addrspace(3) @global_smem, align 16, !dbg !50
  br label %836, !dbg !50

836:                                              ; preds = %834, %832
  fence syncscope("workgroup") release, !dbg !50
  tail call void @llvm.amdgcn.s.barrier(), !dbg !50
  fence syncscope("workgroup") acquire, !dbg !50
  fence syncscope("workgroup") release, !dbg !50
  tail call void @llvm.amdgcn.s.barrier(), !dbg !50
  fence syncscope("workgroup") acquire, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.amdgcn.workgroup.id.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.amdgcn.workitem.id.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.maxnum.f32(float, float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.minnum.f32(float, float) #1

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn
declare void @llvm.amdgcn.s.barrier() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #1

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn memory(none)
declare i32 @llvm.amdgcn.ds.bpermute(i32, i32) #3

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn memory(none)
declare i32 @llvm.amdgcn.ds.swizzle(i32, i32 immarg) #3

attributes #0 = { "amdgpu-flat-work-group-size"="1,512" "amdgpu-waves-per-eu"="1" "denormal-fp-math-f32"="ieee" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent mustprogress nocallback nofree nounwind willreturn }
attributes #3 = { convergent mustprogress nocallback nofree nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 1, !"amdhsa_code_object_version", i32 400}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "amd_cast_trans_fast.py", directory: "/code/yaying/cast_transpose")
!4 = distinct !DISubprogram(name: "_transpose_triton", linkageName: "_transpose_triton", scope: !3, file: !3, line: 15, type: !5, scopeLine: 15, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!5 = !DISubroutineType(cc: DW_CC_normal, types: !6)
!6 = !{}
!7 = !DILocation(line: 16, column: 24, scope: !4)
!8 = !DILocation(line: 17, column: 20, scope: !4)
!9 = !DILocation(line: 19, column: 28, scope: !4)
!10 = !DILocation(line: 19, column: 34, scope: !4)
!11 = !DILocation(line: 20, column: 28, scope: !4)
!12 = !DILocation(line: 20, column: 34, scope: !4)
!13 = !DILocation(line: 22, column: 22, scope: !4)
!14 = !DILocation(line: 23, column: 22, scope: !4)
!15 = !DILocation(line: 24, column: 41, scope: !4)
!16 = !DILocation(line: 24, column: 30, scope: !4)
!17 = !DILocation(line: 24, column: 50, scope: !4)
!18 = !DILocation(line: 25, column: 40, scope: !4)
!19 = !DILocation(line: 25, column: 34, scope: !4)
!20 = !DILocation(line: 26, column: 29, scope: !4)
!21 = !DILocation(line: 28, column: 17, scope: !4)
!22 = !DILocation(line: 28, column: 40, scope: !4)
!23 = !DILocation(line: 28, column: 27, scope: !4)
!24 = !DILocation(line: 29, column: 17, scope: !4)
!25 = !DILocation(line: 29, column: 27, scope: !4)
!26 = !DILocation(line: 30, column: 26, scope: !4)
!27 = !DILocation(line: 30, column: 12, scope: !4)
!28 = !DILocation(line: 30, column: 38, scope: !4)
!29 = !DILocation(line: 31, column: 17, scope: !4)
!30 = !DILocation(line: 31, column: 37, scope: !4)
!31 = !DILocation(line: 31, column: 31, scope: !4)
!32 = !DILocation(line: 32, column: 16, scope: !4)
!33 = !DILocation(line: 35, column: 19, scope: !4)
!34 = !DILocation(line: 36, column: 42, scope: !4)
!35 = !DILocation(line: 37, column: 24, scope: !4)
!36 = !DILocation(line: 38, column: 12, scope: !4)
!37 = !DILocation(line: 38, column: 38, scope: !4)
!38 = !DILocation(line: 39, column: 16, scope: !4)
!39 = !DILocation(line: 44, column: 12, scope: !4)
!40 = !DILocation(line: 44, column: 52, scope: !4)
!41 = !DILocation(line: 44, column: 38, scope: !4)
!42 = !DILocation(line: 46, column: 16, scope: !4)
!43 = !DILocation(line: 47, column: 25, scope: !4)
!44 = !DILocation(line: 184, column: 40, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !4, file: !46, discriminator: 0)
!46 = !DIFile(filename: "standard.py", directory: "/opt/conda/envs/py_3.9/lib/python3.9/site-packages/triton/language")
!47 = !DILocation(line: 47, column: 18, scope: !4)
!48 = !DILocation(line: 163, column: 27, scope: !49, inlinedAt: !47)
!49 = distinct !DILexicalBlockFile(scope: !45, file: !46, discriminator: 0)
!50 = !DILocation(line: 48, column: 28, scope: !4)
!51 = !DILocation(line: 48, column: 4, scope: !4)
