; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target triple = "amdgcn-amd-amdhsa"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8], align 16

define amdgpu_kernel void @_transpose_triton(ptr addrspace(1) nocapture readonly %0, ptr addrspace(1) nocapture writeonly %1, ptr addrspace(1) nocapture writeonly %2, i32 %3, i32 %4, i32 %5, i32 %6, ptr addrspace(1) nocapture readonly %7, ptr addrspace(1) nocapture %8) local_unnamed_addr #0 !dbg !4 {
  %10 = tail call i32 @llvm.amdgcn.workgroup.id.x(), !dbg !7
  %11 = addrspacecast ptr addrspace(1) %7 to ptr, !dbg !8
  %12 = load float, ptr %11, align 4, !dbg !8
  %13 = add i32 %5, 127, !dbg !9
  %14 = sdiv i32 %13, 128, !dbg !10
  %15 = add i32 %6, 127, !dbg !11
  %16 = sdiv i32 %15, 128, !dbg !12
  %17 = shl nsw i32 %16, 3, !dbg !13
  %.frozen = freeze i32 %17
  %18 = sdiv i32 %10, %.frozen, !dbg !14
  %19 = shl i32 %18, 3, !dbg !15
  %20 = sub i32 %14, %19, !dbg !16
  %21 = tail call i32 @llvm.smin.i32(i32 %20, i32 8), !dbg !17
  %22 = srem i32 %10, %21, !dbg !18
  %23 = add i32 %19, %22, !dbg !19
  %24 = mul i32 %18, %.frozen
  %.decomposed = sub i32 %10, %24
  %25 = sdiv i32 %.decomposed, %21, !dbg !20
  %26 = shl i32 %23, 7, !dbg !21
  %27 = tail call i32 @llvm.amdgcn.workitem.id.x(), !dbg !22
  %28 = and i32 %27, 63, !dbg !22
  %29 = lshr i32 %27, 6, !dbg !22
  %30 = lshr i32 %27, 3, !dbg !22
  %31 = and i32 %30, 63, !dbg !22
  %32 = or disjoint i32 %31, 64, !dbg !22
  %33 = shl i32 %27, 4, !dbg !22
  %34 = and i32 %33, 112, !dbg !22
  %35 = or disjoint i32 %34, 4, !dbg !22
  %36 = or disjoint i32 %34, 8, !dbg !22
  %37 = or disjoint i32 %34, 12, !dbg !22
  %38 = or disjoint i32 %26, %31, !dbg !23
  %39 = or disjoint i32 %26, %32, !dbg !23
  %40 = or disjoint i32 %26, %34, !dbg !23
  %41 = or disjoint i32 %26, %35, !dbg !23
  %42 = or disjoint i32 %26, %36, !dbg !23
  %43 = or disjoint i32 %26, %37, !dbg !23
  %44 = shl i32 %25, 7, !dbg !24
  %45 = or disjoint i32 %44, %34, !dbg !25
  %46 = or disjoint i32 %44, %35, !dbg !25
  %47 = or disjoint i32 %44, %36, !dbg !25
  %48 = or disjoint i32 %44, %37, !dbg !25
  %49 = or disjoint i32 %44, %31, !dbg !25
  %50 = or disjoint i32 %44, %32, !dbg !25
  %51 = mul i32 %38, %3, !dbg !26
  %52 = mul i32 %39, %3, !dbg !26
  %53 = add i32 %51, %45, !dbg !27
  %54 = add i32 %51, %46, !dbg !27
  %55 = add i32 %51, %47, !dbg !27
  %56 = add i32 %51, %48, !dbg !27
  %57 = add i32 %52, %45, !dbg !27
  %58 = add i32 %52, %46, !dbg !27
  %59 = add i32 %52, %47, !dbg !27
  %60 = add i32 %52, %48, !dbg !27
  %61 = sext i32 %54 to i64, !dbg !28
  %62 = sext i32 %55 to i64, !dbg !28
  %63 = sext i32 %56 to i64, !dbg !28
  %64 = sext i32 %57 to i64, !dbg !28
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !28
  %66 = sext i32 %58 to i64, !dbg !28
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !28
  %68 = sext i32 %59 to i64, !dbg !28
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !28
  %70 = sext i32 %60 to i64, !dbg !28
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !28
  %72 = icmp slt i32 %38, %5, !dbg !29
  %73 = icmp slt i32 %39, %5, !dbg !29
  %74 = icmp slt i32 %40, %5, !dbg !29
  %75 = icmp slt i32 %45, %6, !dbg !30
  %76 = icmp slt i32 %49, %6, !dbg !30
  %77 = icmp slt i32 %50, %6, !dbg !30
  %78 = and i1 %72, %75, !dbg !31
  %79 = and i1 %73, %75, !dbg !31
  %80 = and i1 %74, %76, !dbg !31
  %81 = and i1 %74, %77, !dbg !31
  br i1 %78, label %82, label %114, !dbg !32

82:                                               ; preds = %9
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !28
  %84 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !28
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !28
  %86 = sext i32 %53 to i64, !dbg !28
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !28
  %88 = addrspacecast ptr addrspace(1) %87 to ptr, !dbg !32
  %89 = load float, ptr %88, align 16, !dbg !32
  %90 = getelementptr inbounds i8, ptr %88, i64 4, !dbg !32
  %91 = load float, ptr %90, align 4, !dbg !32
  %92 = getelementptr inbounds i8, ptr %88, i64 8, !dbg !32
  %93 = load float, ptr %92, align 8, !dbg !32
  %94 = getelementptr inbounds i8, ptr %88, i64 12, !dbg !32
  %95 = load float, ptr %94, align 4, !dbg !32
  %96 = addrspacecast ptr addrspace(1) %85 to ptr, !dbg !32
  %97 = load float, ptr %96, align 16, !dbg !32
  %98 = getelementptr inbounds i8, ptr %96, i64 4, !dbg !32
  %99 = load float, ptr %98, align 4, !dbg !32
  %100 = getelementptr inbounds i8, ptr %96, i64 8, !dbg !32
  %101 = load float, ptr %100, align 8, !dbg !32
  %102 = getelementptr inbounds i8, ptr %96, i64 12, !dbg !32
  %103 = load float, ptr %102, align 4, !dbg !32
  %104 = addrspacecast ptr addrspace(1) %84 to ptr, !dbg !32
  %105 = load float, ptr %104, align 16, !dbg !32
  %106 = getelementptr inbounds i8, ptr %104, i64 4, !dbg !32
  %107 = load float, ptr %106, align 4, !dbg !32
  %108 = getelementptr inbounds i8, ptr %104, i64 8, !dbg !32
  %109 = load float, ptr %108, align 8, !dbg !32
  %110 = getelementptr inbounds i8, ptr %104, i64 12, !dbg !32
  %111 = load float, ptr %110, align 4, !dbg !32
  %112 = addrspacecast ptr addrspace(1) %83 to ptr, !dbg !32
  %113 = load <4 x float>, ptr %112, align 16, !dbg !32
  br label %114, !dbg !32

114:                                              ; preds = %9, %82
  %115 = phi float [ %111, %82 ], [ 0.000000e+00, %9 ]
  %116 = phi float [ %109, %82 ], [ 0.000000e+00, %9 ]
  %117 = phi float [ %107, %82 ], [ 0.000000e+00, %9 ]
  %118 = phi float [ %105, %82 ], [ 0.000000e+00, %9 ]
  %119 = phi float [ %95, %82 ], [ 0.000000e+00, %9 ]
  %120 = phi float [ %93, %82 ], [ 0.000000e+00, %9 ]
  %121 = phi float [ %91, %82 ], [ 0.000000e+00, %9 ]
  %122 = phi float [ %89, %82 ], [ 0.000000e+00, %9 ]
  %123 = phi float [ %97, %82 ], [ 0.000000e+00, %9 ]
  %124 = phi float [ %99, %82 ], [ 0.000000e+00, %9 ]
  %125 = phi float [ %101, %82 ], [ 0.000000e+00, %9 ]
  %126 = phi float [ %103, %82 ], [ 0.000000e+00, %9 ]
  %127 = phi <4 x float> [ %113, %82 ], [ zeroinitializer, %9 ]
  %128 = extractelement <4 x float> %127, i64 0, !dbg !32
  %129 = extractelement <4 x float> %127, i64 1, !dbg !32
  %130 = extractelement <4 x float> %127, i64 2, !dbg !32
  %131 = extractelement <4 x float> %127, i64 3, !dbg !32
  br i1 %79, label %132, label %159, !dbg !32

132:                                              ; preds = %114
  %133 = addrspacecast ptr addrspace(1) %65 to ptr, !dbg !32
  %134 = load float, ptr %133, align 16, !dbg !32
  %135 = getelementptr inbounds i8, ptr %133, i64 4, !dbg !32
  %136 = load float, ptr %135, align 4, !dbg !32
  %137 = getelementptr inbounds i8, ptr %133, i64 8, !dbg !32
  %138 = load float, ptr %137, align 8, !dbg !32
  %139 = getelementptr inbounds i8, ptr %133, i64 12, !dbg !32
  %140 = load float, ptr %139, align 4, !dbg !32
  %141 = addrspacecast ptr addrspace(1) %67 to ptr, !dbg !32
  %142 = load float, ptr %141, align 16, !dbg !32
  %143 = getelementptr inbounds i8, ptr %141, i64 4, !dbg !32
  %144 = load float, ptr %143, align 4, !dbg !32
  %145 = getelementptr inbounds i8, ptr %141, i64 8, !dbg !32
  %146 = load float, ptr %145, align 8, !dbg !32
  %147 = getelementptr inbounds i8, ptr %141, i64 12, !dbg !32
  %148 = load float, ptr %147, align 4, !dbg !32
  %149 = addrspacecast ptr addrspace(1) %69 to ptr, !dbg !32
  %150 = load float, ptr %149, align 16, !dbg !32
  %151 = getelementptr inbounds i8, ptr %149, i64 4, !dbg !32
  %152 = load float, ptr %151, align 4, !dbg !32
  %153 = getelementptr inbounds i8, ptr %149, i64 8, !dbg !32
  %154 = load float, ptr %153, align 8, !dbg !32
  %155 = getelementptr inbounds i8, ptr %149, i64 12, !dbg !32
  %156 = load float, ptr %155, align 4, !dbg !32
  %157 = addrspacecast ptr addrspace(1) %71 to ptr, !dbg !32
  %158 = load <4 x float>, ptr %157, align 16, !dbg !32
  br label %159, !dbg !32

159:                                              ; preds = %114, %132
  %160 = phi float [ %156, %132 ], [ 0.000000e+00, %114 ]
  %161 = phi float [ %154, %132 ], [ 0.000000e+00, %114 ]
  %162 = phi float [ %152, %132 ], [ 0.000000e+00, %114 ]
  %163 = phi float [ %150, %132 ], [ 0.000000e+00, %114 ]
  %164 = phi float [ %140, %132 ], [ 0.000000e+00, %114 ]
  %165 = phi float [ %138, %132 ], [ 0.000000e+00, %114 ]
  %166 = phi float [ %136, %132 ], [ 0.000000e+00, %114 ]
  %167 = phi float [ %134, %132 ], [ 0.000000e+00, %114 ]
  %168 = phi float [ %142, %132 ], [ 0.000000e+00, %114 ]
  %169 = phi float [ %144, %132 ], [ 0.000000e+00, %114 ]
  %170 = phi float [ %146, %132 ], [ 0.000000e+00, %114 ]
  %171 = phi float [ %148, %132 ], [ 0.000000e+00, %114 ]
  %172 = phi <4 x float> [ %158, %132 ], [ zeroinitializer, %114 ]
  %173 = extractelement <4 x float> %172, i64 0, !dbg !32
  %174 = extractelement <4 x float> %172, i64 1, !dbg !32
  %175 = extractelement <4 x float> %172, i64 2, !dbg !32
  %176 = extractelement <4 x float> %172, i64 3, !dbg !32
  %177 = fmul float %12, %122, !dbg !33
  %178 = fmul float %12, %121, !dbg !33
  %179 = fmul float %12, %120, !dbg !33
  %180 = fmul float %12, %119, !dbg !33
  %181 = fmul float %12, %123, !dbg !33
  %182 = fmul float %12, %124, !dbg !33
  %183 = fmul float %12, %125, !dbg !33
  %184 = fmul float %12, %126, !dbg !33
  %185 = fmul float %12, %118, !dbg !33
  %186 = fmul float %12, %117, !dbg !33
  %187 = fmul float %12, %116, !dbg !33
  %188 = fmul float %12, %115, !dbg !33
  %189 = fmul float %12, %128, !dbg !33
  %190 = fmul float %12, %129, !dbg !33
  %191 = fmul float %12, %130, !dbg !33
  %192 = fmul float %12, %131, !dbg !33
  %193 = fmul float %12, %167, !dbg !33
  %194 = fmul float %12, %166, !dbg !33
  %195 = fmul float %12, %165, !dbg !33
  %196 = fmul float %12, %164, !dbg !33
  %197 = fmul float %12, %168, !dbg !33
  %198 = fmul float %12, %169, !dbg !33
  %199 = fmul float %12, %170, !dbg !33
  %200 = fmul float %12, %171, !dbg !33
  %201 = fmul float %12, %163, !dbg !33
  %202 = fmul float %12, %162, !dbg !33
  %203 = fmul float %12, %161, !dbg !33
  %204 = fmul float %12, %160, !dbg !33
  %205 = fmul float %12, %173, !dbg !33
  %206 = fmul float %12, %174, !dbg !33
  %207 = fmul float %12, %175, !dbg !33
  %208 = fmul float %12, %176, !dbg !33
  %209 = tail call float @llvm.maxnum.f32(float %177, float -2.400000e+02), !dbg !34
  %210 = tail call float @llvm.minnum.f32(float %209, float 2.400000e+02), !dbg !34
  %211 = tail call float @llvm.maxnum.f32(float %178, float -2.400000e+02), !dbg !34
  %212 = tail call float @llvm.minnum.f32(float %211, float 2.400000e+02), !dbg !34
  %213 = tail call float @llvm.maxnum.f32(float %179, float -2.400000e+02), !dbg !34
  %214 = tail call float @llvm.minnum.f32(float %213, float 2.400000e+02), !dbg !34
  %215 = tail call float @llvm.maxnum.f32(float %180, float -2.400000e+02), !dbg !34
  %216 = tail call float @llvm.minnum.f32(float %215, float 2.400000e+02), !dbg !34
  %217 = tail call float @llvm.maxnum.f32(float %181, float -2.400000e+02), !dbg !34
  %218 = tail call float @llvm.minnum.f32(float %217, float 2.400000e+02), !dbg !34
  %219 = tail call float @llvm.maxnum.f32(float %182, float -2.400000e+02), !dbg !34
  %220 = tail call float @llvm.minnum.f32(float %219, float 2.400000e+02), !dbg !34
  %221 = tail call float @llvm.maxnum.f32(float %183, float -2.400000e+02), !dbg !34
  %222 = tail call float @llvm.minnum.f32(float %221, float 2.400000e+02), !dbg !34
  %223 = tail call float @llvm.maxnum.f32(float %184, float -2.400000e+02), !dbg !34
  %224 = tail call float @llvm.minnum.f32(float %223, float 2.400000e+02), !dbg !34
  %225 = tail call float @llvm.maxnum.f32(float %185, float -2.400000e+02), !dbg !34
  %226 = tail call float @llvm.minnum.f32(float %225, float 2.400000e+02), !dbg !34
  %227 = tail call float @llvm.maxnum.f32(float %186, float -2.400000e+02), !dbg !34
  %228 = tail call float @llvm.minnum.f32(float %227, float 2.400000e+02), !dbg !34
  %229 = tail call float @llvm.maxnum.f32(float %187, float -2.400000e+02), !dbg !34
  %230 = tail call float @llvm.minnum.f32(float %229, float 2.400000e+02), !dbg !34
  %231 = tail call float @llvm.maxnum.f32(float %188, float -2.400000e+02), !dbg !34
  %232 = tail call float @llvm.minnum.f32(float %231, float 2.400000e+02), !dbg !34
  %233 = tail call float @llvm.maxnum.f32(float %189, float -2.400000e+02), !dbg !34
  %234 = tail call float @llvm.minnum.f32(float %233, float 2.400000e+02), !dbg !34
  %235 = tail call float @llvm.maxnum.f32(float %190, float -2.400000e+02), !dbg !34
  %236 = tail call float @llvm.minnum.f32(float %235, float 2.400000e+02), !dbg !34
  %237 = tail call float @llvm.maxnum.f32(float %191, float -2.400000e+02), !dbg !34
  %238 = tail call float @llvm.minnum.f32(float %237, float 2.400000e+02), !dbg !34
  %239 = tail call float @llvm.maxnum.f32(float %192, float -2.400000e+02), !dbg !34
  %240 = tail call float @llvm.minnum.f32(float %239, float 2.400000e+02), !dbg !34
  %241 = tail call float @llvm.maxnum.f32(float %193, float -2.400000e+02), !dbg !34
  %242 = tail call float @llvm.minnum.f32(float %241, float 2.400000e+02), !dbg !34
  %243 = tail call float @llvm.maxnum.f32(float %194, float -2.400000e+02), !dbg !34
  %244 = tail call float @llvm.minnum.f32(float %243, float 2.400000e+02), !dbg !34
  %245 = tail call float @llvm.maxnum.f32(float %195, float -2.400000e+02), !dbg !34
  %246 = tail call float @llvm.minnum.f32(float %245, float 2.400000e+02), !dbg !34
  %247 = tail call float @llvm.maxnum.f32(float %196, float -2.400000e+02), !dbg !34
  %248 = tail call float @llvm.minnum.f32(float %247, float 2.400000e+02), !dbg !34
  %249 = tail call float @llvm.maxnum.f32(float %197, float -2.400000e+02), !dbg !34
  %250 = tail call float @llvm.minnum.f32(float %249, float 2.400000e+02), !dbg !34
  %251 = tail call float @llvm.maxnum.f32(float %198, float -2.400000e+02), !dbg !34
  %252 = tail call float @llvm.minnum.f32(float %251, float 2.400000e+02), !dbg !34
  %253 = tail call float @llvm.maxnum.f32(float %199, float -2.400000e+02), !dbg !34
  %254 = tail call float @llvm.minnum.f32(float %253, float 2.400000e+02), !dbg !34
  %255 = tail call float @llvm.maxnum.f32(float %200, float -2.400000e+02), !dbg !34
  %256 = tail call float @llvm.minnum.f32(float %255, float 2.400000e+02), !dbg !34
  %257 = tail call float @llvm.maxnum.f32(float %201, float -2.400000e+02), !dbg !34
  %258 = tail call float @llvm.minnum.f32(float %257, float 2.400000e+02), !dbg !34
  %259 = tail call float @llvm.maxnum.f32(float %202, float -2.400000e+02), !dbg !34
  %260 = tail call float @llvm.minnum.f32(float %259, float 2.400000e+02), !dbg !34
  %261 = tail call float @llvm.maxnum.f32(float %203, float -2.400000e+02), !dbg !34
  %262 = tail call float @llvm.minnum.f32(float %261, float 2.400000e+02), !dbg !34
  %263 = tail call float @llvm.maxnum.f32(float %204, float -2.400000e+02), !dbg !34
  %264 = tail call float @llvm.minnum.f32(float %263, float 2.400000e+02), !dbg !34
  %265 = tail call float @llvm.maxnum.f32(float %205, float -2.400000e+02), !dbg !34
  %266 = tail call float @llvm.minnum.f32(float %265, float 2.400000e+02), !dbg !34
  %267 = tail call float @llvm.maxnum.f32(float %206, float -2.400000e+02), !dbg !34
  %268 = tail call float @llvm.minnum.f32(float %267, float 2.400000e+02), !dbg !34
  %269 = tail call float @llvm.maxnum.f32(float %207, float -2.400000e+02), !dbg !34
  %270 = tail call float @llvm.minnum.f32(float %269, float 2.400000e+02), !dbg !34
  %271 = tail call float @llvm.maxnum.f32(float %208, float -2.400000e+02), !dbg !34
  %272 = tail call float @llvm.minnum.f32(float %271, float 2.400000e+02), !dbg !34
  %273 = tail call i32 asm "v_cvt_pk_fp8_f32 $0, $1, $2", "=v,v,v"(float %210, float %212) #4, !dbg !35
  %274 = trunc i32 %273 to i8, !dbg !35
  %extelt.offset = lshr i32 %273, 8, !dbg !35
  %275 = trunc i32 %extelt.offset to i8, !dbg !35
  %276 = tail call i32 asm "v_cvt_pk_fp8_f32 $0, $1, $2", "=v,v,v"(float %214, float %216) #4, !dbg !35
  %277 = trunc i32 %276 to i8, !dbg !35
  %extelt.offset1 = lshr i32 %276, 8, !dbg !35
  %278 = trunc i32 %extelt.offset1 to i8, !dbg !35
  %279 = tail call i32 asm "v_cvt_pk_fp8_f32 $0, $1, $2", "=v,v,v"(float %218, float %220) #4, !dbg !35
  %280 = trunc i32 %279 to i8, !dbg !35
  %extelt.offset2 = lshr i32 %279, 8, !dbg !35
  %281 = trunc i32 %extelt.offset2 to i8, !dbg !35
  %282 = tail call i32 asm "v_cvt_pk_fp8_f32 $0, $1, $2", "=v,v,v"(float %222, float %224) #4, !dbg !35
  %283 = trunc i32 %282 to i8, !dbg !35
  %extelt.offset3 = lshr i32 %282, 8, !dbg !35
  %284 = trunc i32 %extelt.offset3 to i8, !dbg !35
  %285 = tail call i32 asm "v_cvt_pk_fp8_f32 $0, $1, $2", "=v,v,v"(float %226, float %228) #4, !dbg !35
  %286 = trunc i32 %285 to i8, !dbg !35
  %extelt.offset4 = lshr i32 %285, 8, !dbg !35
  %287 = trunc i32 %extelt.offset4 to i8, !dbg !35
  %288 = tail call i32 asm "v_cvt_pk_fp8_f32 $0, $1, $2", "=v,v,v"(float %230, float %232) #4, !dbg !35
  %289 = trunc i32 %288 to i8, !dbg !35
  %extelt.offset5 = lshr i32 %288, 8, !dbg !35
  %290 = trunc i32 %extelt.offset5 to i8, !dbg !35
  %291 = tail call i32 asm "v_cvt_pk_fp8_f32 $0, $1, $2", "=v,v,v"(float %234, float %236) #4, !dbg !35
  %292 = trunc i32 %291 to i8, !dbg !35
  %extelt.offset6 = lshr i32 %291, 8, !dbg !35
  %293 = trunc i32 %extelt.offset6 to i8, !dbg !35
  %294 = tail call i32 asm "v_cvt_pk_fp8_f32 $0, $1, $2", "=v,v,v"(float %238, float %240) #4, !dbg !35
  %295 = trunc i32 %294 to i8, !dbg !35
  %extelt.offset7 = lshr i32 %294, 8, !dbg !35
  %296 = trunc i32 %extelt.offset7 to i8, !dbg !35
  %297 = tail call i32 asm "v_cvt_pk_fp8_f32 $0, $1, $2", "=v,v,v"(float %242, float %244) #4, !dbg !35
  %298 = trunc i32 %297 to i8, !dbg !35
  %extelt.offset8 = lshr i32 %297, 8, !dbg !35
  %299 = trunc i32 %extelt.offset8 to i8, !dbg !35
  %300 = tail call i32 asm "v_cvt_pk_fp8_f32 $0, $1, $2", "=v,v,v"(float %246, float %248) #4, !dbg !35
  %301 = trunc i32 %300 to i8, !dbg !35
  %extelt.offset9 = lshr i32 %300, 8, !dbg !35
  %302 = trunc i32 %extelt.offset9 to i8, !dbg !35
  %303 = tail call i32 asm "v_cvt_pk_fp8_f32 $0, $1, $2", "=v,v,v"(float %250, float %252) #4, !dbg !35
  %304 = trunc i32 %303 to i8, !dbg !35
  %extelt.offset10 = lshr i32 %303, 8, !dbg !35
  %305 = trunc i32 %extelt.offset10 to i8, !dbg !35
  %306 = tail call i32 asm "v_cvt_pk_fp8_f32 $0, $1, $2", "=v,v,v"(float %254, float %256) #4, !dbg !35
  %307 = trunc i32 %306 to i8, !dbg !35
  %extelt.offset11 = lshr i32 %306, 8, !dbg !35
  %308 = trunc i32 %extelt.offset11 to i8, !dbg !35
  %309 = tail call i32 asm "v_cvt_pk_fp8_f32 $0, $1, $2", "=v,v,v"(float %258, float %260) #4, !dbg !35
  %310 = trunc i32 %309 to i8, !dbg !35
  %extelt.offset12 = lshr i32 %309, 8, !dbg !35
  %311 = trunc i32 %extelt.offset12 to i8, !dbg !35
  %312 = tail call i32 asm "v_cvt_pk_fp8_f32 $0, $1, $2", "=v,v,v"(float %262, float %264) #4, !dbg !35
  %313 = trunc i32 %312 to i8, !dbg !35
  %extelt.offset13 = lshr i32 %312, 8, !dbg !35
  %314 = trunc i32 %extelt.offset13 to i8, !dbg !35
  %315 = tail call i32 asm "v_cvt_pk_fp8_f32 $0, $1, $2", "=v,v,v"(float %266, float %268) #4, !dbg !35
  %316 = trunc i32 %315 to i8, !dbg !35
  %extelt.offset14 = lshr i32 %315, 8, !dbg !35
  %317 = trunc i32 %extelt.offset14 to i8, !dbg !35
  %318 = tail call i32 asm "v_cvt_pk_fp8_f32 $0, $1, $2", "=v,v,v"(float %270, float %272) #4, !dbg !35
  %319 = trunc i32 %318 to i8, !dbg !35
  %extelt.offset15 = lshr i32 %318, 8, !dbg !35
  %320 = trunc i32 %extelt.offset15 to i8, !dbg !35
  %321 = getelementptr i8, ptr addrspace(1) %1, i64 %64, !dbg !36
  %322 = getelementptr i8, ptr addrspace(1) %1, i64 %66, !dbg !36
  %323 = getelementptr i8, ptr addrspace(1) %1, i64 %68, !dbg !36
  %324 = getelementptr i8, ptr addrspace(1) %1, i64 %70, !dbg !36
  br i1 %78, label %.critedge, label %.critedge17, !dbg !37

.critedge:                                        ; preds = %159
  %325 = getelementptr i8, ptr addrspace(1) %1, i64 %63, !dbg !36
  %326 = getelementptr i8, ptr addrspace(1) %1, i64 %62, !dbg !36
  %327 = getelementptr i8, ptr addrspace(1) %1, i64 %61, !dbg !36
  %328 = insertelement <4 x i8> poison, i8 %274, i64 0, !dbg !37
  %329 = insertelement <4 x i8> %328, i8 %275, i64 1, !dbg !37
  %330 = insertelement <4 x i8> %329, i8 %277, i64 2, !dbg !37
  %331 = insertelement <4 x i8> %330, i8 %278, i64 3, !dbg !37
  %332 = sext i32 %53 to i64, !dbg !36
  %333 = getelementptr i8, ptr addrspace(1) %1, i64 %332, !dbg !36
  store <4 x i8> %331, ptr addrspace(1) %333, align 4, !dbg !37
  %334 = insertelement <4 x i8> poison, i8 %280, i64 0, !dbg !37
  %335 = insertelement <4 x i8> %334, i8 %281, i64 1, !dbg !37
  %336 = insertelement <4 x i8> %335, i8 %283, i64 2, !dbg !37
  %337 = insertelement <4 x i8> %336, i8 %284, i64 3, !dbg !37
  store <4 x i8> %337, ptr addrspace(1) %327, align 4, !dbg !37
  %338 = insertelement <4 x i8> poison, i8 %286, i64 0, !dbg !37
  %339 = insertelement <4 x i8> %338, i8 %287, i64 1, !dbg !37
  %340 = insertelement <4 x i8> %339, i8 %289, i64 2, !dbg !37
  %341 = insertelement <4 x i8> %340, i8 %290, i64 3, !dbg !37
  store <4 x i8> %341, ptr addrspace(1) %326, align 4, !dbg !37
  %342 = insertelement <4 x i8> poison, i8 %292, i64 0, !dbg !37
  %343 = insertelement <4 x i8> %342, i8 %293, i64 1, !dbg !37
  %344 = insertelement <4 x i8> %343, i8 %295, i64 2, !dbg !37
  %345 = insertelement <4 x i8> %344, i8 %296, i64 3, !dbg !37
  store <4 x i8> %345, ptr addrspace(1) %325, align 4, !dbg !37
  br label %.critedge17, !dbg !37

.critedge17:                                      ; preds = %159, %.critedge
  br i1 %79, label %.critedge19, label %.critedge21, !dbg !37

.critedge19:                                      ; preds = %.critedge17
  %346 = insertelement <4 x i8> poison, i8 %298, i64 0, !dbg !37
  %347 = insertelement <4 x i8> %346, i8 %299, i64 1, !dbg !37
  %348 = insertelement <4 x i8> %347, i8 %301, i64 2, !dbg !37
  %349 = insertelement <4 x i8> %348, i8 %302, i64 3, !dbg !37
  store <4 x i8> %349, ptr addrspace(1) %321, align 4, !dbg !37
  %350 = insertelement <4 x i8> poison, i8 %304, i64 0, !dbg !37
  %351 = insertelement <4 x i8> %350, i8 %305, i64 1, !dbg !37
  %352 = insertelement <4 x i8> %351, i8 %307, i64 2, !dbg !37
  %353 = insertelement <4 x i8> %352, i8 %308, i64 3, !dbg !37
  store <4 x i8> %353, ptr addrspace(1) %322, align 4, !dbg !37
  %354 = insertelement <4 x i8> poison, i8 %310, i64 0, !dbg !37
  %355 = insertelement <4 x i8> %354, i8 %311, i64 1, !dbg !37
  %356 = insertelement <4 x i8> %355, i8 %313, i64 2, !dbg !37
  %357 = insertelement <4 x i8> %356, i8 %314, i64 3, !dbg !37
  store <4 x i8> %357, ptr addrspace(1) %323, align 4, !dbg !37
  %358 = insertelement <4 x i8> poison, i8 %316, i64 0, !dbg !37
  %359 = insertelement <4 x i8> %358, i8 %317, i64 1, !dbg !37
  %360 = insertelement <4 x i8> %359, i8 %319, i64 2, !dbg !37
  %361 = insertelement <4 x i8> %360, i8 %320, i64 3, !dbg !37
  store <4 x i8> %361, ptr addrspace(1) %324, align 4, !dbg !37
  br label %.critedge21, !dbg !37

.critedge21:                                      ; preds = %.critedge17, %.critedge19
  %362 = mul i32 %50, %4, !dbg !38
  %363 = add i32 %362, %40, !dbg !39
  %364 = add i32 %362, %41, !dbg !39
  %365 = add i32 %362, %42, !dbg !39
  %366 = add i32 %362, %43, !dbg !39
  %367 = sext i32 %363 to i64, !dbg !40
  %368 = getelementptr i8, ptr addrspace(1) %2, i64 %367, !dbg !40
  %369 = sext i32 %364 to i64, !dbg !40
  %370 = getelementptr i8, ptr addrspace(1) %2, i64 %369, !dbg !40
  %371 = sext i32 %365 to i64, !dbg !40
  %372 = getelementptr i8, ptr addrspace(1) %2, i64 %371, !dbg !40
  %373 = sext i32 %366 to i64, !dbg !40
  %374 = getelementptr i8, ptr addrspace(1) %2, i64 %373, !dbg !40
  %375 = and i32 %29, 7, !dbg !41
  %376 = and i32 %27, 7, !dbg !41
  %377 = lshr i32 %28, 3, !dbg !41
  %378 = shl nuw nsw i32 %375, 3, !dbg !41
  %379 = or disjoint i32 %378, %377, !dbg !41
  %380 = shl nuw nsw i32 %376, 4, !dbg !41
  %381 = mul nuw nsw i32 %376, 2064, !dbg !41
  %382 = add nuw nsw i32 %379, %381, !dbg !41
  %383 = zext nneg i32 %382 to i64, !dbg !41
  %384 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %383, !dbg !41
  %385 = insertelement <1 x i8> poison, i8 %274, i64 0, !dbg !41
  store <1 x i8> %385, ptr addrspace(3) %384, align 1, !dbg !41
  %386 = or disjoint i32 %380, 1, !dbg !41
  %387 = mul nuw nsw i32 %386, 129, !dbg !41
  %388 = add nuw nsw i32 %387, %379, !dbg !41
  %389 = zext nneg i32 %388 to i64, !dbg !41
  %390 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %389, !dbg !41
  %391 = insertelement <1 x i8> poison, i8 %275, i64 0, !dbg !41
  store <1 x i8> %391, ptr addrspace(3) %390, align 1, !dbg !41
  %392 = or disjoint i32 %380, 2, !dbg !41
  %393 = mul nuw nsw i32 %392, 129, !dbg !41
  %394 = add nuw nsw i32 %393, %379, !dbg !41
  %395 = zext nneg i32 %394 to i64, !dbg !41
  %396 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %395, !dbg !41
  %397 = insertelement <1 x i8> poison, i8 %277, i64 0, !dbg !41
  store <1 x i8> %397, ptr addrspace(3) %396, align 1, !dbg !41
  %398 = or disjoint i32 %380, 3, !dbg !41
  %399 = mul nuw nsw i32 %398, 129, !dbg !41
  %400 = add nuw nsw i32 %399, %379, !dbg !41
  %401 = zext nneg i32 %400 to i64, !dbg !41
  %402 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %401, !dbg !41
  %403 = insertelement <1 x i8> poison, i8 %278, i64 0, !dbg !41
  store <1 x i8> %403, ptr addrspace(3) %402, align 1, !dbg !41
  %404 = or disjoint i32 %380, 4, !dbg !41
  %405 = mul nuw nsw i32 %404, 129, !dbg !41
  %406 = add nuw nsw i32 %405, %379, !dbg !41
  %407 = zext nneg i32 %406 to i64, !dbg !41
  %408 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %407, !dbg !41
  %409 = insertelement <1 x i8> poison, i8 %280, i64 0, !dbg !41
  store <1 x i8> %409, ptr addrspace(3) %408, align 1, !dbg !41
  %410 = or disjoint i32 %380, 5, !dbg !41
  %411 = mul nuw nsw i32 %410, 129, !dbg !41
  %412 = add nuw nsw i32 %411, %379, !dbg !41
  %413 = zext nneg i32 %412 to i64, !dbg !41
  %414 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %413, !dbg !41
  %415 = insertelement <1 x i8> poison, i8 %281, i64 0, !dbg !41
  store <1 x i8> %415, ptr addrspace(3) %414, align 1, !dbg !41
  %416 = or disjoint i32 %380, 6, !dbg !41
  %417 = mul nuw nsw i32 %416, 129, !dbg !41
  %418 = add nuw nsw i32 %417, %379, !dbg !41
  %419 = zext nneg i32 %418 to i64, !dbg !41
  %420 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %419, !dbg !41
  %421 = insertelement <1 x i8> poison, i8 %283, i64 0, !dbg !41
  store <1 x i8> %421, ptr addrspace(3) %420, align 1, !dbg !41
  %422 = or disjoint i32 %380, 7, !dbg !41
  %423 = mul nuw nsw i32 %422, 129, !dbg !41
  %424 = add nuw nsw i32 %423, %379, !dbg !41
  %425 = zext nneg i32 %424 to i64, !dbg !41
  %426 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %425, !dbg !41
  %427 = insertelement <1 x i8> poison, i8 %284, i64 0, !dbg !41
  store <1 x i8> %427, ptr addrspace(3) %426, align 1, !dbg !41
  %428 = or disjoint i32 %380, 8, !dbg !41
  %429 = mul nuw nsw i32 %428, 129, !dbg !41
  %430 = add nuw nsw i32 %429, %379, !dbg !41
  %431 = zext nneg i32 %430 to i64, !dbg !41
  %432 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %431, !dbg !41
  %433 = insertelement <1 x i8> poison, i8 %286, i64 0, !dbg !41
  store <1 x i8> %433, ptr addrspace(3) %432, align 1, !dbg !41
  %434 = or disjoint i32 %380, 9, !dbg !41
  %435 = mul nuw nsw i32 %434, 129, !dbg !41
  %436 = add nuw nsw i32 %435, %379, !dbg !41
  %437 = zext nneg i32 %436 to i64, !dbg !41
  %438 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %437, !dbg !41
  %439 = insertelement <1 x i8> poison, i8 %287, i64 0, !dbg !41
  store <1 x i8> %439, ptr addrspace(3) %438, align 1, !dbg !41
  %440 = or disjoint i32 %380, 10, !dbg !41
  %441 = mul nuw nsw i32 %440, 129, !dbg !41
  %442 = add nuw nsw i32 %441, %379, !dbg !41
  %443 = zext nneg i32 %442 to i64, !dbg !41
  %444 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %443, !dbg !41
  %445 = insertelement <1 x i8> poison, i8 %289, i64 0, !dbg !41
  store <1 x i8> %445, ptr addrspace(3) %444, align 1, !dbg !41
  %446 = or disjoint i32 %380, 11, !dbg !41
  %447 = mul nuw nsw i32 %446, 129, !dbg !41
  %448 = add nuw nsw i32 %447, %379, !dbg !41
  %449 = zext nneg i32 %448 to i64, !dbg !41
  %450 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %449, !dbg !41
  %451 = insertelement <1 x i8> poison, i8 %290, i64 0, !dbg !41
  store <1 x i8> %451, ptr addrspace(3) %450, align 1, !dbg !41
  %452 = or disjoint i32 %380, 12, !dbg !41
  %453 = mul nuw nsw i32 %452, 129, !dbg !41
  %454 = add nuw nsw i32 %453, %379, !dbg !41
  %455 = zext nneg i32 %454 to i64, !dbg !41
  %456 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %455, !dbg !41
  %457 = insertelement <1 x i8> poison, i8 %292, i64 0, !dbg !41
  store <1 x i8> %457, ptr addrspace(3) %456, align 1, !dbg !41
  %458 = or disjoint i32 %380, 13, !dbg !41
  %459 = mul nuw nsw i32 %458, 129, !dbg !41
  %460 = add nuw nsw i32 %459, %379, !dbg !41
  %461 = zext nneg i32 %460 to i64, !dbg !41
  %462 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %461, !dbg !41
  %463 = insertelement <1 x i8> poison, i8 %293, i64 0, !dbg !41
  store <1 x i8> %463, ptr addrspace(3) %462, align 1, !dbg !41
  %464 = or disjoint i32 %380, 14, !dbg !41
  %465 = mul nuw nsw i32 %464, 129, !dbg !41
  %466 = add nuw nsw i32 %465, %379, !dbg !41
  %467 = zext nneg i32 %466 to i64, !dbg !41
  %468 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %467, !dbg !41
  %469 = insertelement <1 x i8> poison, i8 %295, i64 0, !dbg !41
  store <1 x i8> %469, ptr addrspace(3) %468, align 1, !dbg !41
  %470 = or disjoint i32 %380, 15, !dbg !41
  %471 = mul nuw nsw i32 %470, 129, !dbg !41
  %472 = add nuw nsw i32 %471, %379, !dbg !41
  %473 = zext nneg i32 %472 to i64, !dbg !41
  %474 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %473, !dbg !41
  %475 = insertelement <1 x i8> poison, i8 %296, i64 0, !dbg !41
  store <1 x i8> %475, ptr addrspace(3) %474, align 1, !dbg !41
  %476 = or disjoint i32 %379, 64, !dbg !41
  %477 = add nuw nsw i32 %476, %381, !dbg !41
  %478 = zext nneg i32 %477 to i64, !dbg !41
  %479 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %478, !dbg !41
  %480 = insertelement <1 x i8> poison, i8 %298, i64 0, !dbg !41
  store <1 x i8> %480, ptr addrspace(3) %479, align 1, !dbg !41
  %481 = add nuw nsw i32 %476, %387, !dbg !41
  %482 = zext nneg i32 %481 to i64, !dbg !41
  %483 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %482, !dbg !41
  %484 = insertelement <1 x i8> poison, i8 %299, i64 0, !dbg !41
  store <1 x i8> %484, ptr addrspace(3) %483, align 1, !dbg !41
  %485 = add nuw nsw i32 %476, %393, !dbg !41
  %486 = zext nneg i32 %485 to i64, !dbg !41
  %487 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %486, !dbg !41
  %488 = insertelement <1 x i8> poison, i8 %301, i64 0, !dbg !41
  store <1 x i8> %488, ptr addrspace(3) %487, align 1, !dbg !41
  %489 = add nuw nsw i32 %476, %399, !dbg !41
  %490 = zext nneg i32 %489 to i64, !dbg !41
  %491 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %490, !dbg !41
  %492 = insertelement <1 x i8> poison, i8 %302, i64 0, !dbg !41
  store <1 x i8> %492, ptr addrspace(3) %491, align 1, !dbg !41
  %493 = add nuw nsw i32 %476, %405, !dbg !41
  %494 = zext nneg i32 %493 to i64, !dbg !41
  %495 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %494, !dbg !41
  %496 = insertelement <1 x i8> poison, i8 %304, i64 0, !dbg !41
  store <1 x i8> %496, ptr addrspace(3) %495, align 1, !dbg !41
  %497 = add nuw nsw i32 %476, %411, !dbg !41
  %498 = zext nneg i32 %497 to i64, !dbg !41
  %499 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %498, !dbg !41
  %500 = insertelement <1 x i8> poison, i8 %305, i64 0, !dbg !41
  store <1 x i8> %500, ptr addrspace(3) %499, align 1, !dbg !41
  %501 = add nuw nsw i32 %476, %417, !dbg !41
  %502 = zext nneg i32 %501 to i64, !dbg !41
  %503 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %502, !dbg !41
  %504 = insertelement <1 x i8> poison, i8 %307, i64 0, !dbg !41
  store <1 x i8> %504, ptr addrspace(3) %503, align 1, !dbg !41
  %505 = add nuw nsw i32 %476, %423, !dbg !41
  %506 = zext nneg i32 %505 to i64, !dbg !41
  %507 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %506, !dbg !41
  %508 = insertelement <1 x i8> poison, i8 %308, i64 0, !dbg !41
  store <1 x i8> %508, ptr addrspace(3) %507, align 1, !dbg !41
  %509 = add nuw nsw i32 %476, %429, !dbg !41
  %510 = zext nneg i32 %509 to i64, !dbg !41
  %511 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %510, !dbg !41
  %512 = insertelement <1 x i8> poison, i8 %310, i64 0, !dbg !41
  store <1 x i8> %512, ptr addrspace(3) %511, align 1, !dbg !41
  %513 = add nuw nsw i32 %476, %435, !dbg !41
  %514 = zext nneg i32 %513 to i64, !dbg !41
  %515 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %514, !dbg !41
  %516 = insertelement <1 x i8> poison, i8 %311, i64 0, !dbg !41
  store <1 x i8> %516, ptr addrspace(3) %515, align 1, !dbg !41
  %517 = add nuw nsw i32 %476, %441, !dbg !41
  %518 = zext nneg i32 %517 to i64, !dbg !41
  %519 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %518, !dbg !41
  %520 = insertelement <1 x i8> poison, i8 %313, i64 0, !dbg !41
  store <1 x i8> %520, ptr addrspace(3) %519, align 1, !dbg !41
  %521 = add nuw nsw i32 %476, %447, !dbg !41
  %522 = zext nneg i32 %521 to i64, !dbg !41
  %523 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %522, !dbg !41
  %524 = insertelement <1 x i8> poison, i8 %314, i64 0, !dbg !41
  store <1 x i8> %524, ptr addrspace(3) %523, align 1, !dbg !41
  %525 = add nuw nsw i32 %476, %453, !dbg !41
  %526 = zext nneg i32 %525 to i64, !dbg !41
  %527 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %526, !dbg !41
  %528 = insertelement <1 x i8> poison, i8 %316, i64 0, !dbg !41
  store <1 x i8> %528, ptr addrspace(3) %527, align 1, !dbg !41
  %529 = add nuw nsw i32 %476, %459, !dbg !41
  %530 = zext nneg i32 %529 to i64, !dbg !41
  %531 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %530, !dbg !41
  %532 = insertelement <1 x i8> poison, i8 %317, i64 0, !dbg !41
  store <1 x i8> %532, ptr addrspace(3) %531, align 1, !dbg !41
  %533 = add nuw nsw i32 %476, %465, !dbg !41
  %534 = zext nneg i32 %533 to i64, !dbg !41
  %535 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %534, !dbg !41
  %536 = insertelement <1 x i8> poison, i8 %319, i64 0, !dbg !41
  store <1 x i8> %536, ptr addrspace(3) %535, align 1, !dbg !41
  %537 = add nuw nsw i32 %476, %471, !dbg !41
  %538 = zext nneg i32 %537 to i64, !dbg !41
  %539 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %538, !dbg !41
  %540 = insertelement <1 x i8> poison, i8 %320, i64 0, !dbg !41
  store <1 x i8> %540, ptr addrspace(3) %539, align 1, !dbg !41
  fence syncscope("workgroup") release, !dbg !41
  tail call void @llvm.amdgcn.s.barrier(), !dbg !41
  fence syncscope("workgroup") acquire, !dbg !41
  %541 = mul nuw nsw i32 %476, 129, !dbg !41
  %542 = add nuw nsw i32 %541, %380, !dbg !41
  %543 = zext nneg i32 %542 to i64, !dbg !41
  %544 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %543, !dbg !41
  %545 = load i8, ptr addrspace(3) %544, align 1, !dbg !41
  %546 = add nuw nsw i32 %541, %386, !dbg !41
  %547 = zext nneg i32 %546 to i64, !dbg !41
  %548 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %547, !dbg !41
  %549 = load i8, ptr addrspace(3) %548, align 1, !dbg !41
  %550 = add nuw nsw i32 %541, %392, !dbg !41
  %551 = zext nneg i32 %550 to i64, !dbg !41
  %552 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %551, !dbg !41
  %553 = load i8, ptr addrspace(3) %552, align 1, !dbg !41
  %554 = add nuw nsw i32 %541, %398, !dbg !41
  %555 = zext nneg i32 %554 to i64, !dbg !41
  %556 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %555, !dbg !41
  %557 = load i8, ptr addrspace(3) %556, align 1, !dbg !41
  %558 = add nuw nsw i32 %541, %404, !dbg !41
  %559 = zext nneg i32 %558 to i64, !dbg !41
  %560 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %559, !dbg !41
  %561 = load i8, ptr addrspace(3) %560, align 1, !dbg !41
  %562 = add nuw nsw i32 %541, %410, !dbg !41
  %563 = zext nneg i32 %562 to i64, !dbg !41
  %564 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %563, !dbg !41
  %565 = load i8, ptr addrspace(3) %564, align 1, !dbg !41
  %566 = add nuw nsw i32 %541, %416, !dbg !41
  %567 = zext nneg i32 %566 to i64, !dbg !41
  %568 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %567, !dbg !41
  %569 = load i8, ptr addrspace(3) %568, align 1, !dbg !41
  %570 = add nuw nsw i32 %541, %422, !dbg !41
  %571 = zext nneg i32 %570 to i64, !dbg !41
  %572 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %571, !dbg !41
  %573 = load i8, ptr addrspace(3) %572, align 1, !dbg !41
  %574 = add nuw nsw i32 %541, %428, !dbg !41
  %575 = zext nneg i32 %574 to i64, !dbg !41
  %576 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %575, !dbg !41
  %577 = load i8, ptr addrspace(3) %576, align 1, !dbg !41
  %578 = add nuw nsw i32 %541, %434, !dbg !41
  %579 = zext nneg i32 %578 to i64, !dbg !41
  %580 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %579, !dbg !41
  %581 = load i8, ptr addrspace(3) %580, align 1, !dbg !41
  %582 = add nuw nsw i32 %541, %440, !dbg !41
  %583 = zext nneg i32 %582 to i64, !dbg !41
  %584 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %583, !dbg !41
  %585 = load i8, ptr addrspace(3) %584, align 1, !dbg !41
  %586 = add nuw nsw i32 %541, %446, !dbg !41
  %587 = zext nneg i32 %586 to i64, !dbg !41
  %588 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %587, !dbg !41
  %589 = load i8, ptr addrspace(3) %588, align 1, !dbg !41
  %590 = add nuw nsw i32 %541, %452, !dbg !41
  %591 = zext nneg i32 %590 to i64, !dbg !41
  %592 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %591, !dbg !41
  %593 = load i8, ptr addrspace(3) %592, align 1, !dbg !41
  %594 = add nuw nsw i32 %541, %458, !dbg !41
  %595 = zext nneg i32 %594 to i64, !dbg !41
  %596 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %595, !dbg !41
  %597 = load i8, ptr addrspace(3) %596, align 1, !dbg !41
  %598 = add nuw nsw i32 %541, %464, !dbg !41
  %599 = zext nneg i32 %598 to i64, !dbg !41
  %600 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %599, !dbg !41
  %601 = load i8, ptr addrspace(3) %600, align 1, !dbg !41
  %602 = add nuw nsw i32 %541, %470, !dbg !41
  %603 = zext nneg i32 %602 to i64, !dbg !41
  %604 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %603, !dbg !41
  %605 = load i8, ptr addrspace(3) %604, align 1, !dbg !41
  br i1 %80, label %.critedge23, label %.critedge25, !dbg !41

.critedge23:                                      ; preds = %.critedge21
  %606 = mul nuw nsw i32 %379, 129, !dbg !41
  %607 = add nuw nsw i32 %606, %470, !dbg !41
  %608 = zext nneg i32 %607 to i64, !dbg !41
  %609 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %608, !dbg !41
  %610 = load <1 x i8>, ptr addrspace(3) %609, align 1, !dbg !41
  %611 = shufflevector <1 x i8> %610, <1 x i8> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %612 = add nuw nsw i32 %606, %464, !dbg !41
  %613 = zext nneg i32 %612 to i64, !dbg !41
  %614 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %613, !dbg !41
  %615 = load <1 x i8>, ptr addrspace(3) %614, align 1, !dbg !41
  %616 = shufflevector <1 x i8> %615, <1 x i8> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %617 = add nuw nsw i32 %606, %458, !dbg !41
  %618 = zext nneg i32 %617 to i64, !dbg !41
  %619 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %618, !dbg !41
  %620 = load <1 x i8>, ptr addrspace(3) %619, align 1, !dbg !41
  %621 = add nuw nsw i32 %606, %452, !dbg !41
  %622 = zext nneg i32 %621 to i64, !dbg !41
  %623 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %622, !dbg !41
  %624 = load <1 x i8>, ptr addrspace(3) %623, align 1, !dbg !41
  %625 = add nuw nsw i32 %606, %446, !dbg !41
  %626 = zext nneg i32 %625 to i64, !dbg !41
  %627 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %626, !dbg !41
  %628 = load <1 x i8>, ptr addrspace(3) %627, align 1, !dbg !41
  %629 = shufflevector <1 x i8> %628, <1 x i8> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %630 = add nuw nsw i32 %606, %440, !dbg !41
  %631 = zext nneg i32 %630 to i64, !dbg !41
  %632 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %631, !dbg !41
  %633 = load <1 x i8>, ptr addrspace(3) %632, align 1, !dbg !41
  %634 = shufflevector <1 x i8> %633, <1 x i8> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %635 = add nuw nsw i32 %606, %434, !dbg !41
  %636 = zext nneg i32 %635 to i64, !dbg !41
  %637 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %636, !dbg !41
  %638 = load <1 x i8>, ptr addrspace(3) %637, align 1, !dbg !41
  %639 = add nuw nsw i32 %606, %428, !dbg !41
  %640 = zext nneg i32 %639 to i64, !dbg !41
  %641 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %640, !dbg !41
  %642 = load <1 x i8>, ptr addrspace(3) %641, align 1, !dbg !41
  %643 = add nuw nsw i32 %606, %422, !dbg !41
  %644 = zext nneg i32 %643 to i64, !dbg !41
  %645 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %644, !dbg !41
  %646 = load <1 x i8>, ptr addrspace(3) %645, align 1, !dbg !41
  %647 = shufflevector <1 x i8> %646, <1 x i8> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %648 = add nuw nsw i32 %606, %416, !dbg !41
  %649 = zext nneg i32 %648 to i64, !dbg !41
  %650 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %649, !dbg !41
  %651 = load <1 x i8>, ptr addrspace(3) %650, align 1, !dbg !41
  %652 = shufflevector <1 x i8> %651, <1 x i8> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %653 = add nuw nsw i32 %606, %410, !dbg !41
  %654 = zext nneg i32 %653 to i64, !dbg !41
  %655 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %654, !dbg !41
  %656 = load <1 x i8>, ptr addrspace(3) %655, align 1, !dbg !41
  %657 = add nuw nsw i32 %606, %404, !dbg !41
  %658 = zext nneg i32 %657 to i64, !dbg !41
  %659 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %658, !dbg !41
  %660 = load <1 x i8>, ptr addrspace(3) %659, align 1, !dbg !41
  %661 = mul i32 %49, %4, !dbg !38
  %662 = add i32 %661, %43, !dbg !39
  %663 = sext i32 %662 to i64, !dbg !40
  %664 = getelementptr i8, ptr addrspace(1) %2, i64 %663, !dbg !40
  %665 = add i32 %661, %42, !dbg !39
  %666 = sext i32 %665 to i64, !dbg !40
  %667 = getelementptr i8, ptr addrspace(1) %2, i64 %666, !dbg !40
  %668 = add i32 %661, %41, !dbg !39
  %669 = sext i32 %668 to i64, !dbg !40
  %670 = getelementptr i8, ptr addrspace(1) %2, i64 %669, !dbg !40
  %671 = add nuw nsw i32 %606, %380, !dbg !41
  %672 = zext nneg i32 %671 to i64, !dbg !41
  %673 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %672, !dbg !41
  %674 = load <1 x i8>, ptr addrspace(3) %673, align 1, !dbg !41
  %675 = add nuw nsw i32 %606, %386, !dbg !41
  %676 = zext nneg i32 %675 to i64, !dbg !41
  %677 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %676, !dbg !41
  %678 = load <1 x i8>, ptr addrspace(3) %677, align 1, !dbg !41
  %679 = shufflevector <1 x i8> %674, <1 x i8> %678, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !41
  %680 = add nuw nsw i32 %606, %392, !dbg !41
  %681 = zext nneg i32 %680 to i64, !dbg !41
  %682 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %681, !dbg !41
  %683 = load <1 x i8>, ptr addrspace(3) %682, align 1, !dbg !41
  %684 = shufflevector <1 x i8> %683, <1 x i8> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %685 = shufflevector <4 x i8> %679, <4 x i8> %684, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !41
  %686 = add nuw nsw i32 %606, %398, !dbg !41
  %687 = zext nneg i32 %686 to i64, !dbg !41
  %688 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %687, !dbg !41
  %689 = load <1 x i8>, ptr addrspace(3) %688, align 1, !dbg !41
  %690 = shufflevector <1 x i8> %689, <1 x i8> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %691 = shufflevector <4 x i8> %685, <4 x i8> %690, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !41
  %692 = add i32 %661, %40, !dbg !39
  %693 = sext i32 %692 to i64, !dbg !40
  %694 = getelementptr i8, ptr addrspace(1) %2, i64 %693, !dbg !40
  store <4 x i8> %691, ptr addrspace(1) %694, align 4, !dbg !41
  %695 = shufflevector <1 x i8> %660, <1 x i8> %656, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !41
  %696 = shufflevector <4 x i8> %695, <4 x i8> %652, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !41
  %697 = shufflevector <4 x i8> %696, <4 x i8> %647, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !41
  store <4 x i8> %697, ptr addrspace(1) %670, align 4, !dbg !41
  %698 = shufflevector <1 x i8> %642, <1 x i8> %638, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !41
  %699 = shufflevector <4 x i8> %698, <4 x i8> %634, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !41
  %700 = shufflevector <4 x i8> %699, <4 x i8> %629, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !41
  store <4 x i8> %700, ptr addrspace(1) %667, align 4, !dbg !41
  %701 = shufflevector <1 x i8> %624, <1 x i8> %620, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !41
  %702 = shufflevector <4 x i8> %701, <4 x i8> %616, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !41
  %703 = shufflevector <4 x i8> %702, <4 x i8> %611, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !41
  store <4 x i8> %703, ptr addrspace(1) %664, align 4, !dbg !41
  br label %.critedge25, !dbg !41

.critedge25:                                      ; preds = %.critedge21, %.critedge23
  br i1 %81, label %.critedge27, label %.critedge29, !dbg !41

.critedge27:                                      ; preds = %.critedge25
  %704 = insertelement <4 x i8> poison, i8 %545, i64 0, !dbg !41
  %705 = insertelement <4 x i8> %704, i8 %549, i64 1, !dbg !41
  %706 = insertelement <4 x i8> %705, i8 %553, i64 2, !dbg !41
  %707 = insertelement <4 x i8> %706, i8 %557, i64 3, !dbg !41
  store <4 x i8> %707, ptr addrspace(1) %368, align 4, !dbg !41
  %708 = insertelement <4 x i8> poison, i8 %561, i64 0, !dbg !41
  %709 = insertelement <4 x i8> %708, i8 %565, i64 1, !dbg !41
  %710 = insertelement <4 x i8> %709, i8 %569, i64 2, !dbg !41
  %711 = insertelement <4 x i8> %710, i8 %573, i64 3, !dbg !41
  store <4 x i8> %711, ptr addrspace(1) %370, align 4, !dbg !41
  %712 = insertelement <4 x i8> poison, i8 %577, i64 0, !dbg !41
  %713 = insertelement <4 x i8> %712, i8 %581, i64 1, !dbg !41
  %714 = insertelement <4 x i8> %713, i8 %585, i64 2, !dbg !41
  %715 = insertelement <4 x i8> %714, i8 %589, i64 3, !dbg !41
  store <4 x i8> %715, ptr addrspace(1) %372, align 4, !dbg !41
  %716 = insertelement <4 x i8> poison, i8 %593, i64 0, !dbg !41
  %717 = insertelement <4 x i8> %716, i8 %597, i64 1, !dbg !41
  %718 = insertelement <4 x i8> %717, i8 %601, i64 2, !dbg !41
  %719 = insertelement <4 x i8> %718, i8 %605, i64 3, !dbg !41
  store <4 x i8> %719, ptr addrspace(1) %374, align 4, !dbg !41
  br label %.critedge29, !dbg !41

.critedge29:                                      ; preds = %.critedge25, %.critedge27
  %720 = tail call float @llvm.fabs.f32(float %122), !dbg !42
  %721 = tail call float @llvm.fabs.f32(float %121), !dbg !42
  %722 = tail call float @llvm.fabs.f32(float %120), !dbg !42
  %723 = tail call float @llvm.fabs.f32(float %119), !dbg !42
  %724 = tail call float @llvm.fabs.f32(float %123), !dbg !42
  %725 = tail call float @llvm.fabs.f32(float %124), !dbg !42
  %726 = tail call float @llvm.fabs.f32(float %125), !dbg !42
  %727 = tail call float @llvm.fabs.f32(float %126), !dbg !42
  %728 = tail call float @llvm.fabs.f32(float %118), !dbg !42
  %729 = tail call float @llvm.fabs.f32(float %117), !dbg !42
  %730 = tail call float @llvm.fabs.f32(float %116), !dbg !42
  %731 = tail call float @llvm.fabs.f32(float %115), !dbg !42
  %732 = tail call float @llvm.fabs.f32(float %128), !dbg !42
  %733 = tail call float @llvm.fabs.f32(float %129), !dbg !42
  %734 = tail call float @llvm.fabs.f32(float %130), !dbg !42
  %735 = tail call float @llvm.fabs.f32(float %131), !dbg !42
  %736 = tail call float @llvm.fabs.f32(float %167), !dbg !42
  %737 = tail call float @llvm.fabs.f32(float %166), !dbg !42
  %738 = tail call float @llvm.fabs.f32(float %165), !dbg !42
  %739 = tail call float @llvm.fabs.f32(float %164), !dbg !42
  %740 = tail call float @llvm.fabs.f32(float %168), !dbg !42
  %741 = tail call float @llvm.fabs.f32(float %169), !dbg !42
  %742 = tail call float @llvm.fabs.f32(float %170), !dbg !42
  %743 = tail call float @llvm.fabs.f32(float %171), !dbg !42
  %744 = tail call float @llvm.fabs.f32(float %163), !dbg !42
  %745 = tail call float @llvm.fabs.f32(float %162), !dbg !42
  %746 = tail call float @llvm.fabs.f32(float %161), !dbg !42
  %747 = tail call float @llvm.fabs.f32(float %160), !dbg !42
  %748 = tail call float @llvm.fabs.f32(float %173), !dbg !42
  %749 = tail call float @llvm.fabs.f32(float %174), !dbg !42
  %750 = tail call float @llvm.fabs.f32(float %175), !dbg !42
  %751 = tail call float @llvm.fabs.f32(float %176), !dbg !42
  fence syncscope("workgroup") release, !dbg !43
  tail call void @llvm.amdgcn.s.barrier(), !dbg !43
  fence syncscope("workgroup") acquire, !dbg !43
  %752 = tail call float @llvm.maxnum.f32(float %720, float %721), !dbg !47
  %753 = tail call float @llvm.maxnum.f32(float %752, float %722), !dbg !47
  %754 = tail call float @llvm.maxnum.f32(float %753, float %723), !dbg !47
  %755 = tail call float @llvm.maxnum.f32(float %754, float %724), !dbg !47
  %756 = tail call float @llvm.maxnum.f32(float %755, float %725), !dbg !47
  %757 = tail call float @llvm.maxnum.f32(float %756, float %726), !dbg !47
  %758 = tail call float @llvm.maxnum.f32(float %757, float %727), !dbg !47
  %759 = tail call float @llvm.maxnum.f32(float %758, float %728), !dbg !47
  %760 = tail call float @llvm.maxnum.f32(float %759, float %729), !dbg !47
  %761 = tail call float @llvm.maxnum.f32(float %760, float %730), !dbg !47
  %762 = tail call float @llvm.maxnum.f32(float %761, float %731), !dbg !47
  %763 = tail call float @llvm.maxnum.f32(float %762, float %732), !dbg !47
  %764 = tail call float @llvm.maxnum.f32(float %763, float %733), !dbg !47
  %765 = tail call float @llvm.maxnum.f32(float %764, float %734), !dbg !47
  %766 = tail call float @llvm.maxnum.f32(float %765, float %735), !dbg !47
  %767 = tail call float @llvm.maxnum.f32(float %766, float %736), !dbg !47
  %768 = tail call float @llvm.maxnum.f32(float %767, float %737), !dbg !47
  %769 = tail call float @llvm.maxnum.f32(float %768, float %738), !dbg !47
  %770 = tail call float @llvm.maxnum.f32(float %769, float %739), !dbg !47
  %771 = tail call float @llvm.maxnum.f32(float %770, float %740), !dbg !47
  %772 = tail call float @llvm.maxnum.f32(float %771, float %741), !dbg !47
  %773 = tail call float @llvm.maxnum.f32(float %772, float %742), !dbg !47
  %774 = tail call float @llvm.maxnum.f32(float %773, float %743), !dbg !47
  %775 = tail call float @llvm.maxnum.f32(float %774, float %744), !dbg !47
  %776 = tail call float @llvm.maxnum.f32(float %775, float %745), !dbg !47
  %777 = tail call float @llvm.maxnum.f32(float %776, float %746), !dbg !47
  %778 = tail call float @llvm.maxnum.f32(float %777, float %747), !dbg !47
  %779 = tail call float @llvm.maxnum.f32(float %778, float %748), !dbg !47
  %780 = tail call float @llvm.maxnum.f32(float %779, float %749), !dbg !47
  %781 = tail call float @llvm.maxnum.f32(float %780, float %750), !dbg !47
  %782 = tail call float @llvm.maxnum.f32(float %781, float %751), !dbg !47
  %783 = bitcast float %782 to i32, !dbg !43
  %784 = shl i32 %27, 2, !dbg !43
  %785 = xor i32 %784, 128, !dbg !43
  %786 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %785, i32 %783), !dbg !43
  %787 = bitcast i32 %786 to float, !dbg !43
  %788 = tail call float @llvm.maxnum.f32(float %782, float %787), !dbg !47
  %789 = bitcast float %788 to i32, !dbg !43
  %790 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %789, i32 16415), !dbg !43
  %791 = bitcast i32 %790 to float, !dbg !43
  %792 = tail call float @llvm.maxnum.f32(float %788, float %791), !dbg !47
  %793 = bitcast float %792 to i32, !dbg !43
  %794 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %793, i32 8223), !dbg !43
  %795 = bitcast i32 %794 to float, !dbg !43
  %796 = tail call float @llvm.maxnum.f32(float %792, float %795), !dbg !47
  %797 = bitcast float %796 to i32, !dbg !43
  %798 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %797, i32 4127), !dbg !43
  %799 = bitcast i32 %798 to float, !dbg !43
  %800 = tail call float @llvm.maxnum.f32(float %796, float %799), !dbg !47
  %801 = bitcast float %800 to i32, !dbg !43
  %802 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %801, i32 2079), !dbg !43
  %803 = bitcast i32 %802 to float, !dbg !43
  %804 = tail call float @llvm.maxnum.f32(float %800, float %803), !dbg !47
  %805 = bitcast float %804 to i32, !dbg !43
  %806 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %805, i32 1055), !dbg !43
  %807 = icmp eq i32 %28, 0, !dbg !43
  br i1 %807, label %808, label %813, !dbg !43

808:                                              ; preds = %.critedge29
  %809 = zext nneg i32 %375 to i64, !dbg !43
  %810 = getelementptr float, ptr addrspace(3) @global_smem, i64 %809, !dbg !43
  %811 = bitcast i32 %806 to float, !dbg !43
  %812 = tail call float @llvm.maxnum.f32(float %804, float %811), !dbg !47
  store float %812, ptr addrspace(3) %810, align 4, !dbg !43
  br label %813, !dbg !43

813:                                              ; preds = %808, %.critedge29
  fence syncscope("workgroup") release, !dbg !43
  tail call void @llvm.amdgcn.s.barrier(), !dbg !43
  fence syncscope("workgroup") acquire, !dbg !43
  %814 = icmp slt i32 %27, 8, !dbg !43
  %815 = sext i32 %27 to i64, !dbg !43
  %816 = getelementptr float, ptr addrspace(3) @global_smem, i64 %815, !dbg !43
  br i1 %814, label %817, label %819, !dbg !43

817:                                              ; preds = %813
  %818 = load float, ptr addrspace(3) %816, align 4, !dbg !43
  br label %819, !dbg !43

819:                                              ; preds = %813, %817
  %820 = phi float [ %818, %817 ], [ 0.000000e+00, %813 ]
  %821 = bitcast float %820 to i32, !dbg !43
  %822 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %821, i32 4127), !dbg !43
  %823 = bitcast i32 %822 to float, !dbg !43
  %824 = tail call float @llvm.maxnum.f32(float %820, float %823), !dbg !47
  %825 = bitcast float %824 to i32, !dbg !43
  %826 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %825, i32 2079), !dbg !43
  %827 = bitcast i32 %826 to float, !dbg !43
  %828 = tail call float @llvm.maxnum.f32(float %824, float %827), !dbg !47
  %829 = bitcast float %828 to i32, !dbg !43
  %830 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %829, i32 1055), !dbg !43
  %831 = icmp eq i32 %376, 0, !dbg !43
  %832 = and i1 %814, %831, !dbg !43
  br i1 %832, label %833, label %836, !dbg !43

833:                                              ; preds = %819
  %834 = bitcast i32 %830 to float, !dbg !43
  %835 = tail call float @llvm.maxnum.f32(float %828, float %834), !dbg !47
  store float %835, ptr addrspace(3) %816, align 4, !dbg !43
  br label %836, !dbg !43

836:                                              ; preds = %833, %819
  fence syncscope("workgroup") release, !dbg !43
  tail call void @llvm.amdgcn.s.barrier(), !dbg !43
  fence syncscope("workgroup") acquire, !dbg !43
  %837 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !43
  %838 = bitcast float %837 to i32, !dbg !49
  %839 = fcmp oge float %837, 0.000000e+00, !dbg !49
  %840 = fcmp olt float %837, 0.000000e+00, !dbg !49
  fence syncscope("workgroup") release, !dbg !49
  tail call void @llvm.amdgcn.s.barrier(), !dbg !49
  fence syncscope("workgroup") acquire, !dbg !49
  %841 = icmp slt i32 %27, 1, !dbg !49
  %842 = and i1 %841, %839, !dbg !49
  br i1 %842, label %843, label %845, !dbg !49

843:                                              ; preds = %836
  %844 = atomicrmw max ptr addrspace(1) %8, i32 %838 syncscope("agent") monotonic, align 4, !dbg !49
  store i32 %844, ptr addrspace(3) @global_smem, align 16, !dbg !49
  br label %845, !dbg !49

845:                                              ; preds = %843, %836
  fence syncscope("workgroup") release, !dbg !49
  tail call void @llvm.amdgcn.s.barrier(), !dbg !49
  fence syncscope("workgroup") acquire, !dbg !49
  fence syncscope("workgroup") release, !dbg !49
  tail call void @llvm.amdgcn.s.barrier(), !dbg !49
  fence syncscope("workgroup") acquire, !dbg !49
  fence syncscope("workgroup") release, !dbg !49
  tail call void @llvm.amdgcn.s.barrier(), !dbg !49
  fence syncscope("workgroup") acquire, !dbg !49
  %846 = and i1 %841, %840, !dbg !49
  br i1 %846, label %847, label %849, !dbg !49

847:                                              ; preds = %845
  %848 = atomicrmw umin ptr addrspace(1) %8, i32 %838 syncscope("agent") monotonic, align 4, !dbg !49
  store i32 %848, ptr addrspace(3) @global_smem, align 16, !dbg !49
  br label %849, !dbg !49

849:                                              ; preds = %847, %845
  fence syncscope("workgroup") release, !dbg !49
  tail call void @llvm.amdgcn.s.barrier(), !dbg !49
  fence syncscope("workgroup") acquire, !dbg !49
  fence syncscope("workgroup") release, !dbg !49
  tail call void @llvm.amdgcn.s.barrier(), !dbg !49
  fence syncscope("workgroup") acquire, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.amdgcn.workgroup.id.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.amdgcn.workitem.id.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.maxnum.f32(float, float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.minnum.f32(float, float) #1

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn
declare void @llvm.amdgcn.s.barrier() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #1

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn memory(none)
declare i32 @llvm.amdgcn.ds.bpermute(i32, i32) #3

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn memory(none)
declare i32 @llvm.amdgcn.ds.swizzle(i32, i32 immarg) #3

attributes #0 = { "amdgpu-flat-work-group-size"="1,512" "amdgpu-waves-per-eu"="1" "denormal-fp-math-f32"="ieee" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent mustprogress nocallback nofree nounwind willreturn }
attributes #3 = { convergent mustprogress nocallback nofree nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 1, !"amdhsa_code_object_version", i32 400}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "amd_cast_trans_ori.py", directory: "/code/yaying/cast_transpose")
!4 = distinct !DISubprogram(name: "_transpose_triton", linkageName: "_transpose_triton", scope: !3, file: !3, line: 16, type: !5, scopeLine: 16, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!5 = !DISubroutineType(cc: DW_CC_normal, types: !6)
!6 = !{}
!7 = !DILocation(line: 17, column: 24, scope: !4)
!8 = !DILocation(line: 18, column: 20, scope: !4)
!9 = !DILocation(line: 20, column: 28, scope: !4)
!10 = !DILocation(line: 20, column: 34, scope: !4)
!11 = !DILocation(line: 21, column: 28, scope: !4)
!12 = !DILocation(line: 21, column: 34, scope: !4)
!13 = !DILocation(line: 23, column: 22, scope: !4)
!14 = !DILocation(line: 24, column: 22, scope: !4)
!15 = !DILocation(line: 25, column: 41, scope: !4)
!16 = !DILocation(line: 25, column: 30, scope: !4)
!17 = !DILocation(line: 25, column: 50, scope: !4)
!18 = !DILocation(line: 26, column: 40, scope: !4)
!19 = !DILocation(line: 26, column: 34, scope: !4)
!20 = !DILocation(line: 27, column: 29, scope: !4)
!21 = !DILocation(line: 29, column: 17, scope: !4)
!22 = !DILocation(line: 29, column: 40, scope: !4)
!23 = !DILocation(line: 29, column: 27, scope: !4)
!24 = !DILocation(line: 30, column: 17, scope: !4)
!25 = !DILocation(line: 30, column: 27, scope: !4)
!26 = !DILocation(line: 31, column: 27, scope: !4)
!27 = !DILocation(line: 31, column: 39, scope: !4)
!28 = !DILocation(line: 31, column: 13, scope: !4)
!29 = !DILocation(line: 32, column: 17, scope: !4)
!30 = !DILocation(line: 32, column: 37, scope: !4)
!31 = !DILocation(line: 32, column: 31, scope: !4)
!32 = !DILocation(line: 33, column: 16, scope: !4)
!33 = !DILocation(line: 36, column: 19, scope: !4)
!34 = !DILocation(line: 37, column: 42, scope: !4)
!35 = !DILocation(line: 38, column: 24, scope: !4)
!36 = !DILocation(line: 39, column: 13, scope: !4)
!37 = !DILocation(line: 40, column: 16, scope: !4)
!38 = !DILocation(line: 45, column: 53, scope: !4)
!39 = !DILocation(line: 45, column: 39, scope: !4)
!40 = !DILocation(line: 45, column: 13, scope: !4)
!41 = !DILocation(line: 47, column: 16, scope: !4)
!42 = !DILocation(line: 48, column: 25, scope: !4)
!43 = !DILocation(line: 184, column: 40, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !4, file: !45, discriminator: 0)
!45 = !DIFile(filename: "standard.py", directory: "/opt/conda/envs/py_3.9/lib/python3.9/site-packages/triton/language")
!46 = !DILocation(line: 48, column: 18, scope: !4)
!47 = !DILocation(line: 163, column: 27, scope: !48, inlinedAt: !46)
!48 = distinct !DILexicalBlockFile(scope: !44, file: !45, discriminator: 0)
!49 = !DILocation(line: 49, column: 28, scope: !4)
!50 = !DILocation(line: 49, column: 4, scope: !4)
